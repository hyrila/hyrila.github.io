<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>修改用户权限</title>
    <url>/2020/02/17/%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>###用户权限</p>
<p> |- - - | - - -| - - -|<br> 用户   组   其他</p>
<p>用户一般会有读（r）、写（w）、执行（x）等权限，还有特殊权限（s）；如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-13d1161d75964b5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="权限.png"></p>
<a id="more"></a>
<p>###修改权限<br>这里我用修改用户文件权限的实验来证明。<br>1.列出文件列表</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-cdad1bd2583b8ec0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看当前目录下文件.png"></p>
<p>2.通过用chmod命令来修改用户对文件的权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d987b953b4e9982f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过chmod修改用户权限.png"></p>
<p>###特殊权限</p>
<blockquote>
<p>特殊权限是给普通用户添加特殊权限（s）来让其拥有root才能执行的权限。</p>
</blockquote>
<p>下面我用nano命令来做实验。</p>
<p>1.用type命令查看nano路径</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-428aa89f0e3bc7c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看nano路径.png"></p>
<p>2.将nano复制到/app目录下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-249110ebbcc2abe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制到app下.png"></p>
<p>3.给普通用户添加特殊权限<br>3.1用户没有加特殊权限运行nano结果：<br>首先切换到普通用户</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c5274259b3bdd6fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未加特殊权限之前的测试过程.png"><br>其次用没有特殊权限的普通用户guang来执行Nano命令去打开/etc/shadow配置文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-8a60c0c97655da4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用户没有特殊权限下执行nano结果.png"></p>
<p>上面的两个图证明普通用户没有打开/etc/shadow的权限。</p>
<p>3.2给普通用户guang添加特殊权限</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-223b388bfee30bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给普通用户加特殊权限并执行.png"><br>执行结果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e4665bf715de01b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有特殊权限的普通用户可打开配置文件.png"></p>
<p>3.3用ll命令查看详细信息</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b6a2f23a3b732998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过ll命令查看文件详细信息.png"></p>
<p>从图中可以看出用户权限多了一个“s”,即SUID特殊权限。</p>
]]></content>
  </entry>
  <entry>
    <title>安装配置Zabbix-server服务端</title>
    <url>/2020/02/17/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEZabbix-server%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f166baee06b2682c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>####1. 配置zabbix的yum仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-3.4-1.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh zabbix-release-3.4-1.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<p>####2. 安装Zabbix-server及相关包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-get zabbix-agent zabbix-sender</span><br><span class="line"></span><br><span class="line">yum -y install mariadb-server</span><br></pre></td></tr></table></figure>
<hr>
<p>####3. 配置mariadb</p>
<ul>
<li><strong>简单配置数据库配置文件</strong><blockquote>
<p>zabbix数据存储在关系型数库里，还是需要简单配置一下的</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-a713e39f54493628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><p><strong>创建zabbix的数据库和用户账号并授权</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-d0fb6b2a1ad176b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>利用装包后生成的自带的SQL脚本创建zabbix相关数据库表格</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-379b254899d39535.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
</ul>
<hr>
<p>####4. 配置zabbix server</p>
<ul>
<li><p><strong>zabbix服务端配置文件的结构</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-53e09e57d30ffe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>配置zabbix-server.conf文件的通用配置段</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-ad17669b708fb555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>启动 zabbix 服务并查看端口状态</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-672496442bc75b03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
</ul>
<hr>
<p>####5. 配置zabbix网页相关的php配置文件并启动httpd服务</p>
<blockquote>
<p>zabbix时强烈依赖于PHP所配置的时区的！所以一定要修改<strong><code>/etc/httpd/conf.d/zabbix.conf</code></strong>文件关于php的时区配置！</p>
</blockquote>
<ul>
<li><p><strong>修改配置文件</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-e523ea38fb95e006.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>启动httpd服务</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-458dcd23dffb4580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
</ul>
<hr>
<p>####6. 浏览器上访问 zabbix</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-3c87ccb5492b20ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>检查依赖环境</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-87d46cc722b57150.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><p><strong>连入数据库</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-02999ad3306160a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>下一步</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-45914d1c05dd4ec8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>点击Finish</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-1bf4f6860b93b316.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>输入账号密码登录</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-a2aa7dde5e7298e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
<li><p><strong>zabbix-server服务端初步搭建完成</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-bf4a8920e7efdb70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
</ul>
<hr>
<p>####zabbix服务端配置到这就完成啦</p>
]]></content>
  </entry>
  <entry>
    <title>Samba服务实现Linux与Windows相互共享资源</title>
    <url>/2020/02/17/Samba%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0Linux%E4%B8%8EWindows%E7%9B%B8%E4%BA%92%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-747440bb672fae14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#什么是samba?</p>
<blockquote>
<p><strong><code>samba</code></strong>服务与<strong><code>FTP NFS</code></strong>服务一样，是一种提供网络文件共享的服务；<br><strong><code>samba</code></strong>服务可以让<strong><code>Windows</code></strong>机器访问搭建在Linux服务器上的共享文件；<br><strong><code>samba</code></strong>服务支持兼容<strong><code>Windows</code></strong>共享，<strong><code>samba</code></strong>服务搭建在底层是<strong><code>Linux</code></strong>操作系统服务器上，而<strong><code>Windows</code></strong>桌面客户端可以通过<strong><code>samba</code></strong>服务访问<strong><code>Linux</code></strong>服务器上的共享文件，对共享文件数据来说是安全的！<br><strong><code>samba</code></strong>服务是基于内核级支持的，是个文件系统；也能把远程samba共享出来的资源挂载到本机；</p>
</blockquote>
<a id="more"></a>
<p>#samba对应的软件包<br><strong>CentOS7.x 版本</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-7d00797a83cc1a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CentOS7.x 系列版本"><br><strong>CentOS6.x 版本</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-3bde2f727e92f3e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CentOS6.x 系列版本"></p>
<p>#安装samba包</p>
<blockquote>
<p>因为最小化安装的系统，所以这里我先安装需要用到的工具包</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#yum -y install samba    &lt;--安装服务器端的包</span><br><span class="line">[root@centos7 ~]#yum -y install samba-client.x86_64     &lt;--安装客户端的包</span><br><span class="line">[root@centos7 ~]#yum -y install cifs-utils</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-6616fa2daab6fcb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一块儿安装的包"></p>
<p><strong>samba的服务文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-060cc7680f215a8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="samba服务文件"></p>
<p><strong>samba的配置文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d6e7a54db78194c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置文件放在通用包里，下面还有个例子"></p>
<p>#Linux机器通过samba服务访问Windows系统提供的共享文件</p>
<blockquote>
<p>注意：标题的意思就是说Linux机器作为客户端，Windows机器作为服务器端</p>
</blockquote>
<p><strong>在windows系统上创建一个共享文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-137778b93e3cc93a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="步骤如箭头指向一样，粉色最后"></p>
<p><strong>在Linux上测试能不能访问Windows上设置的共享文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-235fe931b3b01887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p><strong>Linux上直接访问共享文件类FTP</strong></p>
<blockquote>
<p>执行<strong><code>smbclient</code></strong>命令成功后，进入<strong><code>smbclient</code></strong>环境，出现提示符：<strong><code>smb:/&gt;</code></strong><br>这里有许多命令和ftp命令相似，如<strong><code>cd 、ls、lcd、get、megt、put、mput</code></strong>等。通过这些命令，我们可以访问远程主机的共享资源。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-aa7ace713c68567d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#Linux机器通过samba服务实现挂载Windows共享</p>
<blockquote>
<p>Linux机器作为客户端，Windows机器作为服务器端；<br>把共享文件直接挂载到本地，这样访问或者修改编辑文件更加方便，无需再每次都登陆，可以直接在本地操作了；</p>
</blockquote>
<p><strong>挂载命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#mount -o username&#x3D;Administrator,password&#x3D;WXG666 &#x2F;&#x2F;192.168.92.1&#x2F;gongxiang &#x2F;mnt&#x2F;winshare</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1af1288a2526193d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>Linux上进行测试：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#cd &#x2F;mnt&#x2F;winshare&#x2F;</span><br><span class="line">[root@centos7 winshare]#ls</span><br><span class="line">anaconda-ks.cfg  mgl.txt  蒙科立固什词典汉蒙对照说明书.doc</span><br><span class="line">[root@centos7 winshare]#touch abc.txt</span><br><span class="line">[root@centos7 winshare]#echo Hello,samba! &gt; abc.txt</span><br><span class="line">[root@centos7 winshare]#ls</span><br><span class="line">abc.txt  anaconda-ks.cfg  mgl.txt  蒙科立固什词典汉蒙对照说明书.doc</span><br><span class="line">[root@centos7 winshare]#cat abc.txt </span><br><span class="line">Hello,samba!</span><br><span class="line">[root@centos7 winshare]#</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-94f2ae9445ae053c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux上测试"><br><strong>Windows上检测：</strong><br>在Windows上的共享文件里我看到的和Linux系统里的一模一样；</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-762f9d65905b175f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>永久保存文件</strong></p>
<blockquote>
<p>想永久保存就把挂载信息写在/etc/fstab文件里就可以了！</p>
</blockquote>
<p><strong><code>配置验证信息文件：</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-7caefead7d685b6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><code>配置验证信息文件：</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-8d74e19e92474419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><code>修改验证信息文件权限：</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-2c40c840d8b010d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><code>挂载共享文件：</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-33116579d9acb009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><code>代码如下：</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#umount &#x2F;mnt&#x2F;winshare&#x2F;</span><br><span class="line">[root@centos7 ~]#df</span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda2      104806400 1251920 103554480   2% &#x2F;</span><br><span class="line">devtmpfs          923828       0    923828   0% &#x2F;dev</span><br><span class="line">tmpfs             933632       0    933632   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs             933632    8808    924824   1% &#x2F;run</span><br><span class="line">tmpfs             933632       0    933632   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;sda5       52403200   32944  52370256   1% &#x2F;app</span><br><span class="line">&#x2F;dev&#x2F;sda1        2086912  133928   1952984   7% &#x2F;boot</span><br><span class="line">tmpfs             186728       0    186728   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line">[root@centos7 ~]#vim &#x2F;etc&#x2F;fstab </span><br><span class="line">[root@centos7 ~]#cat &gt; &#x2F;etc&#x2F;winusr &lt;&lt; eof</span><br><span class="line">&gt; username&#x3D;Administrator</span><br><span class="line">&gt; password&#x3D;WXG666</span><br><span class="line">&gt; eof</span><br><span class="line">[root@centos7 ~]#cat &#x2F;etc&#x2F;winusr </span><br><span class="line">username&#x3D;Administrator</span><br><span class="line">password&#x3D;WXG666</span><br><span class="line">[root@centos7 ~]#ll &#x2F;etc&#x2F;winusr </span><br><span class="line">-rw-r--r--. 1 root root 39 Aug 14 18:59 &#x2F;etc&#x2F;winusr</span><br><span class="line">[root@centos7 ~]#chmod 600 &#x2F;etc&#x2F;&#x2F;winusr </span><br><span class="line">[root@centos7 ~]#ll &#x2F;etc&#x2F;winusr </span><br><span class="line">-rw-------. 1 root root 39 Aug 14 18:59 &#x2F;etc&#x2F;winusr</span><br><span class="line">[root@centos7 ~]#mount -a</span><br><span class="line">[root@centos7 ~]#df</span><br><span class="line">Filesystem               1K-blocks     Used Available Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda2                104806400  1251872 103554528   2% &#x2F;</span><br><span class="line">devtmpfs                    923828        0    923828   0% &#x2F;dev</span><br><span class="line">tmpfs                       933632        0    933632   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs                       933632     8808    924824   1% &#x2F;run</span><br><span class="line">tmpfs                       933632        0    933632   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;sda5                 52403200    32944  52370256   1% &#x2F;app</span><br><span class="line">&#x2F;dev&#x2F;sda1                  2086912   133928   1952984   7% &#x2F;boot</span><br><span class="line">tmpfs                       186728        0    186728   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line">&#x2F;&#x2F;192.168.92.1&#x2F;gongxiang 144436768 13689020 130747748  10% &#x2F;mnt&#x2F;winshare</span><br></pre></td></tr></table></figure>
<hr>
<p>#结语：<br><strong>这篇文章只是以 Linux 机器作为客户端，由 Windows 机器充当共享文件的服务器端的角度来解析网络文件共享服务 samba 服务是如何去实现 Windows 和 Linux 相通；</strong></p>
]]></content>
  </entry>
  <entry>
    <title>搭建主从DNS服务器</title>
    <url>/2020/02/17/%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8EDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>1.在CentOS7.3上搭建好一个DNS服务器当主DNS服务器<br>2在6.9上安装bind包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# yum -y install bind</span><br><span class="line">~]# rpm -ql bind</span><br><span class="line">~]# chkconfig named on</span><br><span class="line">~]# service named start</span><br><span class="line">~]# ss -ntul</span><br><span class="line">~]# vim &#x2F;etc&#x2F;named.conf </span><br><span class="line">~]# rndc reload</span><br><span class="line">~]# ss -ntul</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.修改配置文件为从DNS服务器</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-5f4b5a4d298d8ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>在CentOS6.9上配置好从服务器后重新加载配置文件，打开slave目录里的文件，和作为主DNS服务器的CentOS7.3的数据库文件是否相同</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-aeccc787f9cc6210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<p>在客户端上测试</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c93fce6abecd4f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<blockquote>
<p>到目前为止，在主DNS服务器CentOS7.3没有进行任何操作，就有了从DNS服务器CentOS6.9，这说明谁都能当从DNS服务器，这太不安全了！</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-5af0c3bf0c179039.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>图中在主DNS服务器配置文件里加了一项传输限制策略，只允许从服务器一个传出。在从服务器配置文件里同时也添加了传输限制策略，不允许任何人传输；</p>
]]></content>
  </entry>
  <entry>
    <title>SSH客户端跨过防火墙实现远程登陆</title>
    <url>/2020/02/17/SSH%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%A8%E8%BF%87%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-239158f0f9b4cc2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图-1"></p>
<p><strong>环境</strong>： <strong>C</strong>主机在防火墙策略上禁止<strong>A</strong>主机访问，<strong>A</strong>是<strong>SSH</strong>客户端<br><strong>条件</strong>： <strong>B</strong>主机可以通过防火墙访问<strong>C</strong>主机，是<strong>SSH</strong>服务器<br><strong>问题</strong>： 中间有防火墙，<strong>A</strong>应该怎么去<strong><code>SSH</code></strong>登陆<strong>C</strong>主机呢？</p>
<a id="more"></a>
<p><strong>解决方案：这里利用SSH客户端的强制伪<code>tty</code>分配 <code>&quot; -t &quot;</code> 选项</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-eb8058df0cb3dcb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图-2"><br><strong>在</strong>图-2<strong>中非常清晰的标注了各个步骤的详细内容：</strong></p>
<blockquote>
<p>第①步是作为<strong>图-1</strong>中的<strong>C</strong>主机并搭建的环境</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#</span><br><span class="line">~]# iptables -nvl    &lt;-- 在C主机上查看下防火墙策略</span><br><span class="line">~]#</span><br><span class="line">~]# iptables -F      &lt;-- 如果C主机防火墙打开状态就关闭防火墙</span><br><span class="line">~]#</span><br><span class="line">~]# iptables -A INPUT -s 172.16.251.100 -j REJECT    &lt;-- 在C主机上禁止A主机链接</span><br><span class="line">~]#</span><br></pre></td></tr></table></figure>
<p>第<strong>②</strong>步是<strong>B</strong>主机链接情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# ss -nat</span><br></pre></td></tr></table></figure>
<p>第<strong>③</strong>步，也是最重要的一步，在<strong>A</strong>主机上登陆<strong>C</strong>主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# ssh -t 172.16.251.44 ssh 172.16.251.66   &lt;-- A主机上通过B主机登陆C主机</span><br><span class="line">root@172.16.251.44&#39;s password:  &lt;--输入B主机密码</span><br><span class="line">root@172.16.251.66&#39;s password:  &lt;--输入C主机密码</span><br></pre></td></tr></table></figure>
<p>第④步是在<strong>B</strong>主机上再次查看链接状态，从图-2中清楚地看到有新的链接</p>
]]></content>
  </entry>
  <entry>
    <title>删除libc.so.6后如何修复系统</title>
    <url>/2020/02/17/%E8%AF%AF%E5%88%A0libc.so.6%E5%90%8E%E4%BF%AE%E5%A4%8D%E7%B3%BB%E7%BB%9F%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>####第一步：重启操作系统</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-836e6114519ba644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**重启操作系统**"></p>
<p>####第二步：读进程时瞬间按一下键盘上的<strong>Esc</strong>键</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f52d608f8b2d25b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**读条时按一下Esc键，这步骤需要眼疾手快，因为就在那一两秒时间内完成操作，而且要精确操作，只能按一次Esc键。**"></p>
<a id="more"></a>
<p>####第三步：选择CD-ROM Drive</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-cf11f843f96a2042.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**选择光盘启动**"></p>
<p>####第四步：选择救援模式安装系统</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-17daea99ef8457cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**选择第三项救援安装系统模式**"></p>
<p>####第五步：选择系统语言</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e3ee6a7b3f331c3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**选择English选项，然后【OK】**"></p>
<p>####第六步：选择键盘格式</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0d98d5b3d41e87b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**键盘格式选择Us然后【OK】**"></p>
<p>####第七步：选择网络配置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-2ca4a0b8ce8d628b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**因为该故障和网络无关，所以这里无需相关网络配置，选择【No】选项继续**"></p>
<p>####第八步：关于/mnt/sysimage说明界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e7754addbd6b7c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**选择Continue选项会自动寻找你的根并把它挂在到/mnt/sysimage目录下**"></p>
<p>####第九步：选择OK继续即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-47760ae2155b42a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**说明已经找到你的根并将其挂载在/mnt/sysimage下，选择【OK】继续**"></p>
<p>####第十步：选择【OK】继续</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1a3cb8123fa0ec75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**选【OK】选项，提示已经把根写换到哪里了"></p>
<p>####第十一步：开启Shell</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1f3a25b3250a7528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**选第一个打开一个shell按【OK】继续**"></p>
<p>####第十二步：进入Bash字符命令界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-49a15e96437c65d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**进入Bash之后的操作就是我们恢复系统的最主要环节。详细的命令步骤如图内注释所示**"></p>
<p>####第十三步：最后步骤，重启即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d6a9d0cf5c4ea405.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**如图，选择第三项重启选项，然后【OK】重启**"></p>
]]></content>
  </entry>
  <entry>
    <title>MySQL数据库的多个是什么</title>
    <url>/2020/02/17/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p><strong>什么叫数据库？</strong><br>数据库本质上就是文件、表格的集合。以一定的形式存于存储介质上。</p>
<hr>
<p><strong>什么叫数据库管理系统?</strong><br>数据库管理系统就是管理数据库的系统软件。有我们熟悉的MySQL数据库、Oracle数据库、Mariadb数据库等都是数据库管理系统。生活中我们习惯称其为MySQL数据库、Oracle数据库等。我们可以通过这些数据库管理软件来对数据进行增删减查询等各种操作进行管理。</p>
<hr>
<a id="more"></a>
<p><strong>数据库管理系统的基本功能?</strong><br>数据定义：就好比我要创建一个数据库，在数据库里创建一个几行几列的表格等；<br>数据处理：在数据库里加点东西、删点东西、查点东西等；<br>数据安全：对数据设置一些权限，哪些表格能看哪些表格不能看等数据处理权限管理；<br>数据备份：对数据的备份还原，必要的功能；</p>
<hr>
<p><strong>什么是关系数据库？</strong><br>关系数据库就是行行列列的二维表格。<br>行row：表中的每一行，成为记录；<br>列column：表中的每一列，称为属性、字段；<br><strong>关系是指的什么？</strong><br>表格和表格之间是有关系的，表a里有的记录表b里也有相关记录；就是有一定的关联的表；</p>
<blockquote>
<p>主键(pk)Primary key：作用在某一个列上的，这一列的值，所有的记录是不能相同的，必须不一样的；必须有值！必须唯一！绝对不能为空！主键保证了每条记录的唯一性，可以避免数据冗余；一个表中主键只有一个。</p>
</blockquote>
<hr>
]]></content>
  </entry>
  <entry>
    <title>初识Nginx</title>
    <url>/2020/02/17/%E5%88%9D%E8%AF%86Nginx/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d26ea985c961ebe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#Nginx是什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx官方说法：</span><br><span class="line">    NGINX是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及一个IMAP &#x2F; POP3代理服务器。</span><br><span class="line">    NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。</span><br><span class="line">    NGINX是为解决C10K问题而编写的少数服务器之一。与传统服务器不同，NGINX不依赖于线程来处理请求。</span><br><span class="line">    相反，它使用更加可扩展的事件驱动（异步）架构。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<ul>
<li>Nginx（engine x）是一个轻量级Web服务器。</li>
<li>Nginx（engine x）是一个高性能的HTTP服务器和反向代理服务器。</li>
<li>Nginx（engine x）是一个HTTP服务器HTTP server。</li>
<li>Nginx（engine x）是一个HTTP反向代理服务器HTTP reverse proxy server。</li>
<li>Nginx（engine x）是一个邮件代理服务器mail proxy server 。</li>
<li>Nginx（engine x）是一个TCP/UDP反向代理服务器TCP/UDP proxy server。</li>
</ul>
</blockquote>
<p>#Niginx程序架构</p>
<p><strong>一个master进程/多个worker进程：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个master进程：</span><br><span class="line">	负载加载和分析配置文件、管理worker进程、平滑升级</span><br><span class="line">一个或多个worker进程：</span><br><span class="line">	处理并响应用户请求</span><br><span class="line">缓存相关的进程：</span><br><span class="line">	cache loader：载入缓存对象</span><br><span class="line">	cache manager：管理缓存对象</span><br><span class="line">				</span><br><span class="line">特性：异步、事件驱动和非阻塞</span><br><span class="line">并发请求处理：通过epoll&#x2F;select</span><br><span class="line">文件IO：高级IO sendfile，异步，mmap</span><br><span class="line">&#96;&#96;&#96;				</span><br><span class="line"></span><br><span class="line">#nginx模块：</span><br><span class="line">&gt;- http模块、mail模块、stream模块</span><br><span class="line">&gt;- 高度模块化，每个模块的配置文件可以单独放在一个路径， include 指定目录。</span><br></pre></td></tr></table></figure>
<p>核心模块：core module<br>标准模块：HTTP modules、Mail modules、Stream modules<br>第三方模块：3rd party modules</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#nginx的功用：</span><br></pre></td></tr></table></figure>
<ol>
<li>静态的web资源服务器；(图片服务器，或js/css/html/txt等静态资源服务器)</li>
<li>结合FastCGI/uwSGI/SCGI等协议反代动态资源请求；</li>
<li>http/https协议的反向代理；</li>
<li>imap4/pop3协议的反向代理；</li>
<li>tcp/udp协议的请求转发；<pre><code></code></pre></li>
</ol>
<hr>
<p><strong>未完待续…</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Mariadb数据库入门语句</title>
    <url>/2020/02/17/Mariadb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%A5%E9%97%A8%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p><strong>创建用户账号</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mydb]&gt; create user yonghuming@&#39;172.16.%.%&#39; identified by &#39;yonghumima&#39;; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mydb]&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>忘记用户密码后修改密码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;方法一：</span><br><span class="line">MariaDB [mydb]&gt; set password for &#39;yonghuming&#39;@&#39;172.16.%.%&#39; &#x3D; password(&#39;mageedu&#39;);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mydb]&gt; flush privileges;    &lt;-- 让MySQL重新加载授权表,即修改密码后让其即时生效</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">&gt;&gt;方法二：</span><br><span class="line">MariaDB [mydb]&gt; select user,host,password from mysql.user;</span><br><span class="line">+------------+---------------+-------------------------------------------+</span><br><span class="line">| user       | host          | password                                  |</span><br><span class="line">+------------+---------------+-------------------------------------------+</span><br><span class="line">| root       | localhost     |                                           |</span><br><span class="line">| root       | host1.centos7 |                                           |</span><br><span class="line">| root       | 127.0.0.1     |                                           |</span><br><span class="line">| root       | ::1           |                                           |</span><br><span class="line">|            | localhost     |                                           |</span><br><span class="line">|            | host1.centos7 |                                           |</span><br><span class="line">| test       | 192.168.10.%  | *9A94EE7D14C10908118B62D2DA88E6932E11E438 | &lt;-- 修改前结尾是E438</span><br><span class="line">| wxg        | 192.168.%.%   | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| yonghuming | 172.16.%.%    | *9A94EE7D14C10908118B62D2DA88E6932E11E438 | &lt;-- 相同密码的加密后生成的也相同</span><br><span class="line">+------------+---------------+-------------------------------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mydb]&gt; update mysql.user set password&#x3D;password(&#39;123456&#39;) where user&#x3D;&#39;test&#39; and host&#x3D;&#39;192.168.10.%&#39;;    </span><br><span class="line">(上面的整条命令的意思是：把test用户的密码修改为‘123456’ where 是条件，后面一定要跟条件)   </span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [mydb]&gt; select user,host,password from mysql.user;                                                  </span><br><span class="line">+------------+---------------+-------------------------------------------+</span><br><span class="line">| user       | host          | password                                  |</span><br><span class="line">+------------+---------------+-------------------------------------------+</span><br><span class="line">| root       | localhost     |                                           |</span><br><span class="line">| root       | host1.centos7 |                                           |</span><br><span class="line">| root       | 127.0.0.1     |                                           |</span><br><span class="line">| root       | ::1           |                                           |</span><br><span class="line">|            | localhost     |                                           |</span><br><span class="line">|            | host1.centos7 |                                           |</span><br><span class="line">| test       | 192.168.10.%  | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | &lt;--修改后是2AD9</span><br><span class="line">| wxg        | 192.168.%.%   | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | &lt;--相同密码生成的password字段的加密码相同</span><br><span class="line">| yonghuming | 172.16.%.%    | *9A94EE7D14C10908118B62D2DA88E6932E11E438 |</span><br><span class="line">+------------+---------------+-------------------------------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line">（注意当我们调用内键变量password修改密码的时候，它是对称的，同样的密码所生成的加密码是相同的！细看表中test和wxg的加密码）</span><br><span class="line"></span><br><span class="line">MariaDB [mydb]&gt; flush privileges;    &lt;-- 让MySQL重新加载授权表,即修改密码后让其即时生效</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">MariaDB [mydb]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>查看当前数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;    &lt;---查看当前数据库</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| bjtechan           |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.09 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>切换到某个数据库去访问</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [bjtechan]&gt; use mysql;    &lt;---切换到mysql数据库</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>查看当前数据库有哪些表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; show tables;    &lt;---查看当前数据库有哪些表</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">24 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>查看某一个表的表结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; desc user;    &lt;---查看表结构：desc 加 表名</span><br><span class="line">+------------------------+-----------------------------------+------+-----+---------+-------+</span><br><span class="line">| Field                  | Type                              | Null | Key | Default | Extra |</span><br><span class="line">+------------------------+-----------------------------------+------+-----+---------+-------+</span><br><span class="line">| Host                   | char(60)                          | NO   | PRI |         |       |</span><br><span class="line">| User                   | char(16)                          | NO   | PRI |         |       |</span><br><span class="line">| Password               | char(41)                          | NO   |     |         |       |</span><br><span class="line">| Select_priv            | enum(&#39;N&#39;,&#39;Y&#39;)                     | NO   |     | N       |       |</span><br><span class="line">| Show_db_priv           | enum(&#39;N&#39;,&#39;Y&#39;)                     | NO   |     | N       |       |</span><br><span class="line">| Super_priv             | enum(&#39;N&#39;,&#39;Y&#39;)                     | NO   |     | N       |       |</span><br><span class="line">| Repl_slave_priv        | enum(&#39;N&#39;,&#39;Y&#39;)                     | NO   |     | N       |       |</span><br><span class="line">| ssl_type               | enum(&#39;&#39;,&#39;ANY&#39;,&#39;X509&#39;,&#39;SPECIFIED&#39;) | NO   |     |         |       |</span><br><span class="line">| ssl_cipher             | blob                              | NO   |     | NULL    |       |</span><br><span class="line">| x509_issuer            | blob                              | NO   |     | NULL    |       |</span><br><span class="line">| x509_subject           | blob                              | NO   |     | NULL    |       |</span><br><span class="line">| max_questions          | int(11) unsigned                  | NO   |     | 0       |       |</span><br><span class="line">| max_updates            | int(11) unsigned                  | NO   |     | 0       |       |</span><br><span class="line">| max_connections        | int(11) unsigned                  | NO   |     | 0       |       |</span><br><span class="line">| max_user_connections   | int(11)                           | NO   |     | 0       |       |</span><br><span class="line">| plugin                 | char(64)                          | NO   |     |         |       |</span><br><span class="line">| authentication_string  | text                              | NO   |     | NULL    |       |</span><br><span class="line">+------------------------+-----------------------------------+------+-----+---------+-------+</span><br><span class="line">42 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>选择性查看一个表格的某些字段</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; select host,user,password from user;    &lt;---查看user表格的主机用户密码信息</span><br><span class="line">+---------------+------+-------------------------------------------+</span><br><span class="line">| host          | user | password                                  |</span><br><span class="line">+---------------+------+-------------------------------------------+</span><br><span class="line">| localhost     | root | *9A94EE7D14C10908118B62D2DA88E6932E11E438 |</span><br><span class="line">| centos7.3.wxg | root | *9A94EE7D14C10908118B62D2DA88E6932E11E438 |</span><br><span class="line">| 127.0.0.1     | root | *9A94EE7D14C10908118B62D2DA88E6932E11E438 |</span><br><span class="line">| ::1           | root | *9A94EE7D14C10908118B62D2DA88E6932E11E438 |</span><br><span class="line">+---------------+------+-------------------------------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>显示当前的用户名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; select user();    &lt;---显示当前的用户名</span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |    &lt;---当前登录的用户，这才是完整的用户名；用户@主机名（可以是ip地址）</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>创建数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| bjtechan           |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create database testdb;    &lt;---创建一个叫testdb的数据库</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| bjtechan           |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| testdb             |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; quit    &lt;---退出数据库</span><br><span class="line">Bye</span><br><span class="line">[root@centos7 ~]#</span><br></pre></td></tr></table></figure>
<p><strong>显示当前登录用户</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MariaDB [mydb]&gt; select current_user();    &lt;-- 内键函数，显示当前登录用户</span><br><span class="line">+----------------+</span><br><span class="line">| current_user() |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mydb]&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>部署LAMP 实现Wordpress 搭建个人博客</title>
    <url>/2020/02/17/%E9%83%A8%E7%BD%B2LAMP-%E5%AE%9E%E7%8E%B0Wordpress-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b07200ddbfc91429.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#搭建LAMP软件环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#yum -y install httpd mariadb-server mariadb php php-mysql  &lt;--安装所用包</span><br><span class="line">[root@centos7 ~]#systemctl start httpd      &lt;--启动apache服务</span><br><span class="line">[root@centos7 ~]#systemctl start mariadb    &lt;--启动数据库服务</span><br><span class="line">[root@centos7 ~]#ss -ntl      &lt;--查看端口是否都打开</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">LISTEN     0      50                 *:3306  &lt;--数据库端口             *:*                  </span><br><span class="line">LISTEN     0      128                *:22                             *:*                  </span><br><span class="line">LISTEN     0      100        127.0.0.1:25                             *:*                  </span><br><span class="line">LISTEN     0      128               :::80    &lt;--httpd端口            :::*                  </span><br><span class="line">LISTEN     0      128               :::22                            :::*                  </span><br><span class="line">LISTEN     0      100              ::1:25                            :::*                  </span><br><span class="line">[root@centos7 ~]#httpd -M  &lt;--查看http模块里有没有php模块</span><br><span class="line">php5_module (shared)       &lt;--这里有</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>#给数据库设置密码确保能连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#mysql_secure_installation   &lt;--数据库安全脚本，为了安全用来初始化设置密码的</span><br><span class="line">[root@centos7 ~]#mysql -u root -pmageedu     &lt;--用户名密码登陆数据库 &#39;-u&#39;后面用户 &#39;-p&#39;后面密码</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 9</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; quit     &lt;--退出！确认能正常连接登陆数据库</span><br><span class="line">Bye</span><br><span class="line">[root@centos7 ~]#</span><br></pre></td></tr></table></figure>
<p>#搭建phpMyAdmin数据库管理环境</p>
<blockquote>
<p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。可以在任何地方使用并在远端管理MySQL数据库，方便的建立、修改、删除数据库及资料表。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#yum -y install lftp   &lt;--安装ftp工具</span><br><span class="line">[root@centos7 ~]#lftp 172.16.0.1   &lt;--登陆FTP服务器</span><br><span class="line">lftp 172.16.0.1:~&gt; cd &#x2F;pub&#x2F;Sources&#x2F;sources&#x2F;httpd&#x2F;     &lt;--cd进存放phpMyAdmin压缩包的目录</span><br><span class="line">lftp 172.16.0.1:&#x2F;pub&#x2F;Sources&#x2F;sources&#x2F;httpd&gt; ls</span><br><span class="line">phpMyAdmin-4.4.14.1-all-languages.zi  &lt;--这就是我们要用的压缩包，注意版本！！！太高了我们的软件环境不支持的</span><br><span class="line">lftp 172.16.0.1:&#x2F;pub&#x2F;Sources&#x2F;sources&#x2F;httpd&gt; get phpMyAdmin-4.4.14.1-all-languages.zip &lt;--下载到本地 </span><br><span class="line">10057503 bytes transferred      &lt;--下载成功                                    </span><br><span class="line">lftp 172.16.0.1:&#x2F;pub&#x2F;Sources&#x2F;sources&#x2F;httpd&gt; quit   &lt;--退出FTP服务</span><br><span class="line">[root@centos7 ~]#unzip phpMyAdmin-4.4.14.1-all-languages.zip    &lt;--.zip后缀的压缩包用unzip工具解压包</span><br><span class="line">[root@centos7 ~]#mv phpMyAdmin-4.4.14.1-all-languages &#x2F;var&#x2F;www&#x2F;html&#x2F;pma   &lt;--把代码放到http网页目录下</span><br></pre></td></tr></table></figure>
<p><strong>安装phpMyAdmin的依赖包，修改配置文件设置一个用于cookie验证的口令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 pma]#yum -y install php-mbstring   &lt;--安装依赖包，不装这个web页面打不开的</span><br><span class="line">[root@centos7 pma]#cp config.sample.inc.php config.inc.php   &lt;--设置修改pspmyAdmin配置文件</span><br><span class="line">[root@centos7 pma]#openssl rand -base64 21    &lt;--生成随机口令，这里用openssl生成一个21位的</span><br><span class="line">[root@centos7 pma]#vim config.inc.php   &lt;--vim修改配置文件，把基于COOKIE验证的口令修改成我们手动生成的口令</span><br><span class="line">[root@centos7 pma]#systemctl restart httpd    &lt;--重启web服务</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1a67d318bcd5d40a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-969e0b94ec5fed5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>测试web页面是否成功</strong></p>
<blockquote>
<p>打开浏览器输入本机IP地址，比如：192.168.92.128/pma; 注意/pma一定要加上啊，因为我们访问的是phpMyAdmin的页面<br><img src="http://upload-images.jianshu.io/upload_images/6121564-83024ee79c5e268d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看到这个页面就成功了"></p>
</blockquote>
<p>#用phpMyAdmin创建存放个人博客的数据库和用户并设置权限<br><strong>首先在利用phpMyAdmin工具登陆数据库</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-0336cd0fba7e4fcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-6578126262badad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="登陆后界面"></p>
<p><strong>创建数据库</strong></p>
<blockquote>
<p>创建数据库！干吗用啊？放博客用！<br>这里我们只创建一个数据库就可以了，里面的表啊什么的Wordpress会搞定！</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d41fb1d5f31d6f8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据库 — 新建数据库名 — 创建"><br><strong>创建Wordpress用户</strong></p>
<blockquote>
<p>干什么用的用户啊？我们后续利用Wordpress搭建博客后，Wordpress不得有个对应的数据库用户对数据库进行管理是吧？而且还是对我们创建的存放博客数据用的blog数据库管理是不！不多说看图！</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-95606ca1f228f71b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="New — 用户 — 添加用户"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-81a81e87432774f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用户名 — 主机IP地址 — 密码 — 页面右下角执行按钮"></p>
<p><strong>给创建的用户给管理blog数据的权限</strong><br>第一步：<br><img src="http://upload-images.jianshu.io/upload_images/6121564-81051d067118a668.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据库 — blog — 执行"><br>第二步：<br><img src="http://upload-images.jianshu.io/upload_images/6121564-6a40c03783df7598.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给权限：全选 — 执行"><br>第三步：<br><img src="http://upload-images.jianshu.io/upload_images/6121564-4c8f35d4435f6522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看提示信息确定一下"></p>
<blockquote>
<p><strong>到这里，我们已经实现了基于web页面的数据库了</strong></p>
</blockquote>
<p><strong>回到操作系统数据库测试一下是否成功</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0da23c19f36551c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>#搭建Wordpress<br><strong>解包</strong></p>
<blockquote>
<p>去Wordpress官网下载安装包（度娘吧）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]#tar xvf wordpress-4.8-zh_CN.tar.gz     &lt;--解压</span><br><span class="line">[root@centos7 ~]#mv wordpress &#x2F;var&#x2F;www&#x2F;html&#x2F;blog        &lt;--移动并改名为blog</span><br><span class="line">[root@centos7 ~]#cd &#x2F;var&#x2F;www&#x2F;html&#x2F;blog&#x2F;                 &lt;--cd进来</span><br></pre></td></tr></table></figure>
<p><strong>配置</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-29be09d2dcb01680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这是对应的配置文件/var/www/html/blog/wp-config.php内容"></p>
<ol>
<li>先给apache权限<br><img src="http://upload-images.jianshu.io/upload_images/6121564-15b5327ea5aff7cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li>
<li>浏览器输入IP地址，后面斜杠加blog</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-4a83e66a18213793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击现在开始按钮"><br>3. 设置相关配置信息：分别录入数据库名，用户名等信息</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-89fe483cc66f6f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入完先关配置信息之后点击 [ 提交 ] 按钮"><br>4. 开始安装</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f173b358d7c91fff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>5. 搭建自己的个人博客站点</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b033ae215a682f15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ol start="6">
<li>登陆</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-aea7a616dfa3eff1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-50ed79f8b8f05565.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>7. 浏览一下自己搭建的博客吧</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d8db4e089ce720b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<blockquote>
<p>到此，搭建个人博客就完成了，后续怎么玩随你便喽~</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>MariaDB主从复制实现冗余</title>
    <url>/2020/02/17/MariaDB%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%86%97%E4%BD%99/</url>
    <content><![CDATA[<p>#1. 实验环境</p>
<blockquote>
<ul>
<li>系统环境：CentOS7.3</li>
<li>两个节点：<ul>
<li>主节点host3_13 IP地址：192.168.10.13</li>
<li>从节点host4_14 IP地址：192.168.10.14</li>
</ul>
</li>
<li>同步时间：工具ntpdate</li>
</ul>
</blockquote>
<a id="more"></a>

<p>#2.  搭建环境：</p>
<ul>
<li><strong>安装软件</strong><blockquote>
<p>两个节点做同样的工作，这里只放一个节点的图</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-8fe58ce3dce53f3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>同步时间</strong><blockquote>
<p>作为主从复制，时间同步是最基本的设置！最基本的满足条件！</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c8ea406018f11c91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主节点"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-7ed55560c948d79a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从节点"></p>
<p>#3. 配置主节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主节点做三件事：</span><br><span class="line">   （1）对主服务器节点设置一个server-id</span><br><span class="line">   （2）启用二进制日志</span><br><span class="line">   （3）创建一个拥有复制权限的用户账号</span><br></pre></td></tr></table></figure>
<p><strong>修改 Mariadb-server 配置文件 /etc/my.cnf.d/server.cnf ：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-d663dfe0b0f75fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>创建一个拥有复制权限的用户账号 ：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host3 mysql]#mysql</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">ongoingServer version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">######  创建一个拥有复制权限的用户账号  ######</span><br><span class="line">MariaDB [(none)]&gt; grant replication client,replication slave on *.* to &#39;repluser&#39;@&#39;19&#39;192.168.10.%&#39; identified by &#39;replpass&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show master status;</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">| master-log.000003 |      498 |              |                  |</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show binlog events in &#39;master-log.000003&#39;;</span><br><span class="line">+-------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                                                                    |</span><br><span class="line">+-------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------------------------------+</span><br><span class="line">| master-log.000003 |   4 | Format_desc |         1 |         245 | Server ver: 5.5.52-MariaDB, Binlog ver: 4                                                               |</span><br><span class="line">| master-log.000003 | 245 | Query       |         1 |         423 | grant replication client,replication slave on *.* to &#39;repluser&#39;@&#39;192.168.10.%&#39; identified by &#39;replpass&#39; |</span><br><span class="line">| master-log.000003 | 423 | Query       |         1 |         498 | flush privileges                                                                                        |</span><br><span class="line">+-------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-ff46a43f6c70094f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#4. 配置从节点<br><strong>修改从服务器节点的配置文件：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-655289f02cbc4387.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>使用主服务器授权的账号连接至主服务器：</strong></p>
<blockquote>
<ul>
<li><strong>特别注意：</strong><br>把一个节点变成从节点的要点在于，我们可以在从节点上直接用MySQL命令’’CHANGE MASTER TO’’来指定自己的主服务器节点；<br><img src="http://upload-images.jianshu.io/upload_images/6121564-52d64df95360a42e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li>
</ul>
</blockquote>
<p><strong>指定主服务器节点：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-2b85da40b2f00180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>启动从服务器：</strong></p>
<blockquote>
<p>对比从服务器状态前后差别</p>
</blockquote>
<ul>
<li><strong>启动之前状态</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-bcf8c196ea8f554d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li>
<li><strong>start slave启动从服务器节点</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-8cd03669f0e2a402.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li>
</ul>
<p>#5. 测试</p>
<blockquote>
<p>我们这是实现<strong>MySQL主从复制</strong>，所测试也简单，我们在主节点上跑几个SQL指令，在回过头查看从节点就可以了<br><strong>主节点：</strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-657df588a1fe6cec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>从节点：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d9c1445cddd8f30d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>整体对比图：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b5dde140f198fc54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>#结语：<br><strong>对于运维工程师来说有很多工作需要我们去做，这里有些个技能是我们必须具备的；其中数据备份、数据恢复和MySQL主从复制等等更是格外重要！还是那句话，我们运维就是什么都懂的神仙…</strong></p>
]]></content>
  </entry>
  <entry>
    <title>基于CentOS6.9的MariaDB二进制安装</title>
    <url>/2020/02/17/%E5%9F%BA%E4%BA%8ECentOS6.9%E7%9A%84MariaDB%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-3ffaf94b91dc260c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#去mariadb官网下载二进制安装包</p>
<a id="more"></a>
<p><strong>进入官网<a href="http://www.mariadb.org选择" target="_blank" rel="noopener">www.mariadb.org选择</a> Download</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-2aed770df96796b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入官网www.mariadb.org选择 Download "></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c5790456a663b286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击 Download"></p>
<p><strong>选择版本</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-17f9043f4618ac1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里选择5.5.57版本"></p>
<p><strong>*选择需要安装的二进制安装包</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-0df7aba3a2a1681d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择基于 x86平台使用与Linux的编译完的二进制包"></p>
<p><strong>谢谢MariaDB的免费软件，开源精神是世界的…</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-121b858c0396a241.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最后这里是填写相关信息的，这里我们无需填写直接选择下载"></p>
<hr>
<p>#安装环境<br><strong>Linux 操作系统 CentOS 6.9 版本</strong><br>#创建数据库存放路径和权限设置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-173b8a5b5c21df11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建存放数据库目录 --&gt;创建系统用户账号 --&gt;设置系统用户对/app/data目录的权限"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@host-b app]#pwd</span><br><span class="line">&#x2F;app</span><br><span class="line">[root@host-b app]#</span><br><span class="line">[root@host-b app]#mkdir &#x2F;app&#x2F;data</span><br><span class="line">[root@host-b app]#</span><br><span class="line">[root@host-b app]#rz</span><br><span class="line"></span><br><span class="line">[root@host-b app]#getent passwd mysql</span><br><span class="line">[root@host-b app]#</span><br><span class="line">[root@host-b app]#ls</span><br><span class="line">data  mariadb-5.5.57-linux-x86_64.tar.gz</span><br><span class="line">[root@host-b app]#</span><br><span class="line">[root@host-b app]#useradd -r -d &#x2F;app&#x2F;data -s &#x2F;sbin&#x2F;nologin -u 36 mysql</span><br><span class="line">[root@host-b app]#id mysql</span><br><span class="line">uid&#x3D;36(mysql) gid&#x3D;36(mysql) groups&#x3D;36(mysql)</span><br><span class="line">[root@host-b app]#ll</span><br><span class="line">total 218916</span><br><span class="line">drwxr-xr-x. 2 root root      4096 Aug  2 12:33 data</span><br><span class="line">-rw-r--r--. 1 root root 224162771 Aug  2  2017 mariadb-5.5.57-linux-x86_64.tar.gz</span><br><span class="line">[root@host-b app]#</span><br><span class="line">[root@host-b app]#chown mysql:mysql &#x2F;app&#x2F;data</span><br><span class="line">[root@host-b app]#ll -d data</span><br><span class="line">drwxr-xr-x. 2 mysql mysql 4096 Aug  2 12:33 data</span><br><span class="line">[root@host-b app]#</span><br></pre></td></tr></table></figure>
<p>#解压缩包</p>
<blockquote>
<p>我们安装的是人家已经编译好了的二进制程序包，所以解压后路径不能随便放，按人家编译好的环境来解压！路径为<strong><code>/usr/local</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-6702c43436e2e8ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="特别注意路径要指定"></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host-b app]#tar xvf mariadb-5.5.57-linux-x86_64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;  &lt;--路径一定要正确</span><br></pre></td></tr></table></figure>
<p>#修改二进制程序的名字和相关权限</p>
<blockquote>
<p>因为我们安装的是人家已经编译好的二进制程序包，人家编译时规定名字叫mysql，所以我们要修改名字，或者创建软连接</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-477cde3069409c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改解压后目录的名字 --&gt; 创建软链接"><br>#修改mysql目录下的所有文件的所属组为mysql</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d6040828b649c90a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="为了有权限执行mysql目录下的程序，修改mysql目录下所有文件的所属组为mysql"></p>
<blockquote>
<p>到这之后，我们的二进制程序已经解压完了，虽然二进制程序有啦，但是还不能启动。如果现在就启动会报错的，比如路径错误等，所以接下来我们还需要修改配置文件<br>#修改配置文件<br><strong>1. 我们先打开看一下系统自带的配置文件</strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f791f6db20cd4ba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据库路径与我们指定的/app/data不符合"><br><strong>2. 利用模板自己创建配置文件</strong><br><strong><code>选择配置文件模板</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-f656ede0f4bddbcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="切进存放模板的目录选择模板"></p>
<p><strong><code>创建一个配置文件目录，把模板复制过去改名为 my.cfg</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-559a6f7b140db4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong><code>vim 编辑配给文件，数据库路径是必须配置</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-eea98c00a9ee3ea8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>#生成对应的mysql数据库并放在 /app/data 目录下</p>
<blockquote>
<p>我们用一个脚本生成数据库即可，脚本在解压缩目录下的scripts目录里 ：<br><strong><code>/mysql_install_db</code></strong></p>
</blockquote>
<p><strong><code>把 /mysql_install_db 脚本找出来</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-4d061a57802e15c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong><code>执行脚本 /mysql_install_db 生成数据库</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host-b mysql]#pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql      &lt;---执行脚本的目录</span><br><span class="line">[root@host-b mysql]#scripts&#x2F;mysql_install_db --datadir&#x3D;&#x2F;app&#x2F;data --user&#x3D;mysql  &lt;--指定路径和用户</span><br><span class="line">Installing MariaDB&#x2F;MySQL system tables in &#39;&#x2F;app&#x2F;data&#39; ...</span><br><span class="line">170804  4:14:58 [Warning] &#39;THREAD_CONCURRENCY&#39; is deprecated and will be removed in a fu</span><br><span class="line">ture release.170804  4:14:58 [Note] .&#x2F;bin&#x2F;mysqld (mysqld 5.5.57-MariaDB) starting as process 4955 ...</span><br><span class="line">OK</span><br><span class="line">Filling help tables...</span><br><span class="line">170804  4:14:59 [Warning] &#39;THREAD_CONCURRENCY&#39; is deprecated and will be removed in a fu</span><br><span class="line">ture release.170804  4:14:59 [Note] .&#x2F;bin&#x2F;mysqld (mysqld 5.5.57-MariaDB) starting as process 4963 ...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files&#x2F;mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">&#39;.&#x2F;bin&#x2F;mysqladmin&#39; -u root password &#39;new-password&#39;</span><br><span class="line">&#39;.&#x2F;bin&#x2F;mysqladmin&#39; -u root -h host-b.6.9 password &#39;new-password&#39;</span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">&#39;.&#x2F;bin&#x2F;mysql_secure_installation&#39;</span><br><span class="line"></span><br><span class="line">which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">See the MariaDB Knowledgebase at http:&#x2F;&#x2F;mariadb.com&#x2F;kb or the</span><br><span class="line">MySQL manual for more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MariaDB daemon with:</span><br><span class="line">cd &#39;.&#39; ; .&#x2F;bin&#x2F;mysqld_safe --datadir&#x3D;&#39;&#x2F;app&#x2F;data&#39;</span><br><span class="line"></span><br><span class="line">You can test the MariaDB daemon with mysql-test-run.pl</span><br><span class="line">cd &#39;.&#x2F;mysql-test&#39; ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems at http:&#x2F;&#x2F;mariadb.org&#x2F;jira</span><br><span class="line"></span><br><span class="line">The latest information about MariaDB is available at http:&#x2F;&#x2F;mariadb.org&#x2F;.</span><br><span class="line">You can find additional information about the MySQL part at:</span><br><span class="line">http:&#x2F;&#x2F;dev.mysql.com</span><br><span class="line">Consider joining MariaDB&#39;s strong and vibrant community:</span><br><span class="line">https:&#x2F;&#x2F;mariadb.org&#x2F;get-involved&#x2F;</span><br><span class="line"></span><br><span class="line">[root@host-b mysql]#</span><br><span class="line">[root@host-b mysql]#ll &#x2F;app&#x2F;data    &lt;--查看该目录</span><br><span class="line">total 1084</span><br><span class="line">-rw-rw----. 1 mysql mysql   16384 Aug  4 04:14 aria_log.00000001</span><br><span class="line">-rw-rw----. 1 mysql mysql      52 Aug  4 04:14 aria_log_control</span><br><span class="line">drwx------. 2 mysql root     4096 Aug  4 04:14 mysql               &lt;--mysql数据库</span><br><span class="line">-rw-rw----. 1 mysql mysql   30346 Aug  4 04:14 mysql-bin.000001</span><br><span class="line">-rw-rw----. 1 mysql mysql 1038814 Aug  4 04:14 mysql-bin.000002</span><br><span class="line">-rw-rw----. 1 mysql mysql      38 Aug  4 04:14 mysql-bin.index</span><br><span class="line">drwx------. 2 mysql mysql    4096 Aug  4 04:14 performance_schema</span><br><span class="line">drwx------. 2 mysql root     4096 Aug  4 04:14 test</span><br><span class="line">[root@host-b mysql]#</span><br><span class="line">[root@host-b mysql]#</span><br></pre></td></tr></table></figure>
<p><strong><code>执行完 /mysql_install_db 脚本后 /app/data 目录下生成的数据库文件</code></strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-9b18fef47765ece5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>#把服务脚本准备好，设置相关权限启动服务</p>
<blockquote>
<p><strong><code>（1）把服务脚本 mysql.server 放到 /etc/inint.d/ 目录下，并修改为 mysqld</code></strong><br><strong><code>（2）设置为开机启动</code></strong><br><strong><code>（3）创建日志文件 mkdir /var/log/mysql.d 注意路径</code></strong><br><strong><code>（4）修改日志文件的所属主为 mysql</code></strong><br><strong><code>（5）service mysqld start 启动服务</code></strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-3b0cc33740c748be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>#把二进制程序路径添加到$PATH变量里</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-34aaf6781a006765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b930a0d5bb64b2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#测试并设置口令</p>
<blockquote>
<p>目前我们虽然能够登陆数据库但是不安全，因为没有设置安全口令谁都可以登录；这样不安全。</p>
</blockquote>
<p><strong>测试查看端都是否打开：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-9598f389abb793ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>没有设置安全口令之前：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f211aebca4e274ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>执行安全脚本<code>mysql_secure_installation</code>设置口令：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d3f35a8f8b96760e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>执行安全脚本<code>mysql_secure_installation</code>的代码块：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host-b bin]#mysql_secure_installation </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql_secure_installation: line 393: find_mysql_client: command not</span><br><span class="line"> found</span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&#39;ll need the current</span><br><span class="line">password for the root user.  If you&#39;ve just installed MariaDB, and</span><br><span class="line">you haven&#39;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):      &lt;-- 输入当前root密码,这里是回车</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y&#x2F;n] y      &lt;-- 设置root密码么？ &lt; y &gt;</span><br><span class="line">New password:                   &lt;-- 这里输入密码</span><br><span class="line">Re-enter new password:          &lt;-- 再输入一次密码</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y&#x2F;n] y          &lt;-- 是否删除匿名用户？ &lt; y &gt;</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &#39;localhost&#39;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y&#x2F;n] n   &lt;-- 是否禁止root远程登录？   &lt; n &gt; </span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &#39;test&#39; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y&#x2F;n] n    &lt;-- 是否删除测试数据库？ &lt; y&#x2F;n都可以 &gt;</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y&#x2F;n] y              &lt;-- 现在从新加载权限表么？ &lt; y &gt;</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&#39;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br><span class="line">[root@host-b bin]#</span><br></pre></td></tr></table></figure>
<p><strong>设置安全口令之后：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1e54ecb806ba0244.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>#结语<br><strong>到这里就完成整个MariaDB数据库的二进制安装！自己学习用的，如果能够帮到读者是我的荣幸；</strong><br><strong>最后还要感谢MariaDB数据库的开发者们免费提供的软件，开源精神是世界的！</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Linux常见的文件系统操作命令</title>
    <url>/2020/02/17/Linux%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p>cat：可以显示文件的内容（经常和more搭配使用），或将多个文件合并成一个文件。</p>
</li>
<li><p>chgrp：用来改变文件或目录所属的用户组，命令的参数以空格分开的要改变属组的文件列表，文件名支持通配符，如果用户不是该文件的所有者，则不能改变该文件的所属组。</p>
</li>
<li><p>chmod：用于改变文件或目录的访问权限，该命令有两种用法：一种是使用图形化的方法，另一种是数字设置法。</p>
</li>
<li><p>chown：用来将指定用户或组为特定的所有者。用户可以设置为用户名或用户ID，组可以是组名或组ID。特定的文件是以空格分开的可以改变权限的文件列表，文件名支持通配符。</p>
</li>
<li><p>clear：用来清除终端屏幕。</p>
</li>
<li><p>cmp：用来比较两个文件的大小。</p>
</li>
<li><p>cp：（copy）可以将文件或目录复制到其他目录中，就如同Dos下的copy命令一样，功能非常强大。在使用cp命令时，只需要指定源文件名或目标目录即可。</p>
<a id="more"></a></li>
<li><p>cut：用来移除文件的部分内容。</p>
</li>
<li><p>diff：用来找出两个文件的不同之处。</p>
</li>
<li><p>du： 用来显示磁盘的剩余空间的大小。</p>
</li>
<li><p>file：用来显示文件的类型。</p>
</li>
<li><p>find：用来在目录中搜索文件，并执行指定的操作。</p>
</li>
<li><p>head：只查看文件的头几行内容，而不必浏览整个文件。</p>
</li>
<li><p>ln：可以在文件之间创建链接，实际上是给某个文件指定一个访问它的别名。</p>
</li>
<li><p>less：用法与more类似，可以查看超过一屏的文件内容，不同的是less除了可以按空格键向下显示文件外，还可以利用方向键来滚动显示文件，要结束浏览，只要在less的提示符“：”后按Q即可。</p>
</li>
<li><p>locate：可用于查找文件，且比find命令的搜索速度快。</p>
</li>
<li><p>ls（list）：用来显示当前目录中的文件和子目录列表。</p>
</li>
<li><p>mkdir(make directory)：建立子目录。</p>
</li>
<li><p>more：用于显示内容超过一屏的文件，为了避免文件内容显示瞬间就消失，可以使用more命令让文件显示满一屏时暂停，在按下任意键的时候继续显示下一屏的内容。</p>
</li>
<li><p>rmkdir(remove directory)：用来删除“空”的子目录或无用的目录文件。</p>
</li>
<li><p>mv(move)：可以将文件以及目录移到其他位置，或更改文件以及目录的名称。</p>
</li>
<li><p>pico：可指定文本的编辑方式。</p>
</li>
<li><p>pwd(print working directory)：可显示用户当前所在的目录。</p>
</li>
<li><p>rm：用来删除系统中过时或无用的文件，可以删除目录中的文件或目录本身，对于链接文件，原有文件保持不变。</p>
</li>
<li><p>sort：将文本文件自动分类。</p>
</li>
<li><p>stat：用于显示文件或文件系统的状态。</p>
</li>
<li><p>Strings：显示文件中要打印的字符串。</p>
</li>
<li><p>tail：输出文件的结尾。</p>
</li>
<li><p>touch：改变文件的时间戳。</p>
</li>
<li><p>umask：用于启动bash shell。</p>
</li>
<li><p>uniq：移除已分类文件中的重复文本行。</p>
</li>
<li><p>vi：启动vi文本编辑器。</p>
</li>
<li><p>wc：显示文件中字节、词组合文本行的数目。</p>
</li>
<li><p>whereis：查找特定目录下的原始程序，二进制程序或用户手册等文件的位置。</p>
</li>
<li><p>man：如果用户对某个命令想了解更详细的话，可使用此命令。</p>
</li>
<li><p>dd：复制一个文件。</p>
</li>
<li><p>df：查看一个文件系统的磁盘空间使用情况。</p>
</li>
<li><p>edquoat：设置用户与用户组的磁盘空间限制，即Windows系统中的配额。</p>
</li>
<li><p>fdformat：格式化软盘。</p>
</li>
<li><p>fdisk：执行Linux下的磁盘分区。</p>
</li>
<li><p>mkfs：建立一个Linux文件系统。</p>
</li>
<li><p>mkswap：创建一个Linux交换分区。</p>
</li>
<li><p>mount：挂载一个文件系统。</p>
</li>
<li><p>quota：限制和显示用户可用的磁盘空间。</p>
</li>
<li><p>swapon，swapoff：启用或取消设备和文件的交换页。</p>
</li>
<li><p>quotaon，quotaoff：启用或取消quota限制。</p>
</li>
<li><p>umount：取消文件系统的装备</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>基于Ansible角色部署Nginx虚拟机</title>
    <url>/2020/02/17/%E5%9F%BA%E4%BA%8EAnsible%E8%A7%92%E8%89%B2%E9%83%A8%E7%BD%B2Nginx%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-7a473fa6901bd4b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &quot;&quot;</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@Client</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host1</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host2</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host3</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host4</span><br><span class="line">ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host5</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">cd &#x2F;etc&#x2F;ansible&#x2F;</span><br><span class="line">vim hosts </span><br><span class="line">mkdir -pv &#x2F;etc&#x2F;ansible&#x2F;roles&#x2F;nginx&#x2F;&#123;tasks,templates,files,vars,handlers,meta,default&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-6936c7efd044ef2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主机清单"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e8cb56696efb7d70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f53367a438f659e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="剧本内容"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-af31bcb5f39f0154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="角色在剧本里的任务"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-3a8ca7f6f630da87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="角色的配置文件"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-a7efd1af1f99bc79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="角色的配置文件"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-ae1e067dc9af0f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="handlers里面的触发任务"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-342678f03a58abde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="变量"></p>
]]></content>
  </entry>
  <entry>
    <title>Linux文件系统简记</title>
    <url>/2020/02/17/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>###文件系统简述</p>
<blockquote>
<p>什么是<strong>文件系统</strong>?又怎么去查找？例如我们在Windows系统下，查找一个File文件的时候，我们会选择一个磁盘开始一层一层的查找，直到找到File文件为止。这种的从最顶端开始一级一级的找到文件的，称之为<strong>文件路径</strong>。<br>所以<strong>文件系统</strong>的概念就是：从给定的<strong>起始位置</strong>去逐层查找，如果给定的<strong>起始位置</strong>相对其他而言再也没有的位置称之为绝对起始位置。</p>
</blockquote>
<p><strong>在</strong>Linux系统为了能够实现多个文件系统或者多个文件系统独立管理的功能，所以需要分区，但是各分区不能被自我独立的访问，而是只能与现有的根一块儿被访问。</p>
<a id="more"></a>
<p>###Linux文件系统的特性</p>
<blockquote>
<p> 1.文件名严格区分字符大小写。<br>  2.文件名可使用除了/以外的任意字符，但不介意使用特殊字符。<br>  3.文件名长度不能超过255个字符。<br>  4.所有 <strong>.</strong> 开头的文件都是隐藏文件。</p>
</blockquote>
<p>###Linux文件系统与目录结构</p>
<blockquote>
<p><strong>Linux</strong>下的文件系统为树形结构，入口为  <strong>/</strong>   树形结构下的文件目录。</p>
</blockquote>
<p>####文件系统与目录结构</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-483f69a05c7dc03a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件目录结构.png"></p>
<p>####Linux根下的文件</p>
<blockquote>
<p><strong>Linux</strong>根<strong>“ / “</strong>下的文件目录以及功能</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0b62ad14488ff997.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux根下的文件及功能.png"></p>
<p>###Linux下的文件类型<br>** - <strong>：普通文件<br>**d</strong>：目录文件<br><strong>b</strong>：块儿设备<br><strong>c</strong>：字符设备<br><strong>l</strong>：符号链接文件<br><strong>p</strong>：管道文件<br><strong>s</strong>：套接字文件，socket</p>
]]></content>
  </entry>
  <entry>
    <title>Linux iptables</title>
    <url>/2020/02/17/LinuxIptables/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-8af721e5cedcd878.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#概念：</p>
<blockquote>
<p><strong><code>(1) Linux 防火墙 ：</code></strong><br><strong><code>集成在内核里的 Netfilter 组件里，Linux 内核里已经自带一些防火墙的基本功能。并且,把我们生活中和工作中常用的常见的防火墙功能分成 PREROUTING  INPUT OUTPUT FORWARD POSTROUTING   等五个功能模块，称之为hook。用iptables 命令工具向其写入规则！</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-27c9b954f67e613f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><code>(2) Linux 防火墙工具 ：</code></strong><br><strong><code>iptables：命令行工具，工作在用户空间；用来编写规则，写好的规则被送往netfilter ，告诉内核如何去处理信息包</code></strong><br><strong><code>firewalld ：CentOS 7 引入的新的前端管理工具，这里不细讲</code></strong></p>
</blockquote>
<a id="more"></a>
<p>#iptables组成：</p>
<blockquote>
<p><strong><code>(1) 四个表table : raw--&gt;mangle--&gt;nat--&gt;filter</code></strong><br><strong><code>raw: 关闭NAT表上启用的连接跟踪机制，加快封包穿越防火墙速度</code></strong><br><strong><code>mangle: 修改数据标记位规则表</code></strong><br><strong><code>nat: 地址转换规则表</code></strong><br><strong><code>filter: 过滤规则表，根据预定义的规则过滤符合条件的数据包</code></strong><br><strong><code>(2) 五个链chain : INPUT OUTPUT PREROUTING FORWARD POSTROUTING</code></strong><br><strong><code>(3) Netfilter 表和链对应关系与图:</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-3bc7cc67078b2dd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表和链的对应关系"><br><img src="http://upload-images.jianshu.io/upload_images/6121564-db8756851c6c0341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</blockquote>
<p>#iptables防火墙策略命令行语法：</p>
<p><strong>iptables + 表 + 链 + 规则（匹配条件 +  处理动作）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**** iptables命令行输入顺序 ****</span><br><span class="line"></span><br><span class="line">iptables -t 表名 &lt;-A&#x2F;I&#x2F;D&#x2F;R&gt; 规则链名 [规则号] &lt;-i&#x2F;o 网卡名&gt; -p 协议名 &lt;-s 源IP&#x2F;源子网&gt; --sport 源端口 &lt;-d 目标IP&#x2F;目标子网&gt; --dport 目标端口 -j 动作</span><br></pre></td></tr></table></figure>
<p><strong>常用选项：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-t &lt;表&gt; ： 指定要操纵的表； </span><br><span class="line">-A ： 向规则链中添加条目； </span><br><span class="line">-D ： 从规则链中删除条目； </span><br><span class="line">-i ： 向规则链中插入条目； </span><br><span class="line">-R ： 替换规则链中的条目； </span><br><span class="line">-L ： 显示规则链中已有的条目； </span><br><span class="line">-F ： 清楚规则链中已有的条目； </span><br><span class="line">-Z ： 清空规则链中的数据包计算器和字节计数器； </span><br><span class="line">-N ： 创建新的用户自定义规则链； </span><br><span class="line">-P ： 定义规则链中的默认目标； </span><br><span class="line">-h ： 显示帮助信息； </span><br><span class="line">-p ： 指定要匹配的数据包协议类型； </span><br><span class="line">-s ： 指定要匹配的数据包源ip地址； </span><br><span class="line">-j &lt;目标&gt; ： 指定要跳转的目标； </span><br><span class="line">-i &lt;网络接口&gt; ： 指定数据包进入本机的网络接口； </span><br><span class="line">-o &lt;网络接口&gt; ： 指定数据包要离开本机所使用的网络接口；</span><br></pre></td></tr></table></figure>

<p>#Linux防火墙iptables实例：</p>
<p><strong>查看防火墙策略：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# iptables -vnL   &lt;-- 最最基本也要用这三个选项！裸配了...</span><br></pre></td></tr></table></figure>

<p><strong>清除已有规则：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# iptables -F     &lt;-- 基本都用这个</span><br><span class="line">~]# iptables -X  </span><br><span class="line">~]# iptables -Z</span><br></pre></td></tr></table></figure>

<p><strong>屏蔽IP：DROP是丢弃的意思</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# iptables -I INPUT -s 123.45.6.7 -j DROP       &lt;-- 屏蔽单个IP的命令 </span><br><span class="line">~]# iptables -I INPUT -s 123.0.0.0&#x2F;8 -j DROP      &lt;-- 封整个段即从123.0.0.1到123.255.255.254的命令 </span><br><span class="line">~]# iptables -I INPUT -s 124.45.0.0&#x2F;16 -j DROP    &lt;-- 封IP段即从123.45.0.1到123.45.255.254的命令 </span><br><span class="line">~]# iptables -I INPUT -s 123.45.6.0&#x2F;24 -j DROP    &lt;-- 封IP段即从123.45.6.1到123.45.6.254的命令</span><br></pre></td></tr></table></figure>

<p><strong>开放指定端口：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT         &lt;-- 允许本地回环接口(即运行本机访问本机)</span><br><span class="line">：</span><br><span class="line">~]# iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT    &lt;-- 允许已建立的或相关连的通行</span><br><span class="line"></span><br><span class="line">~]# iptables -A OUTPUT -j ACCEPT     &lt;-- 允许所有本机向外的访问</span><br><span class="line"></span><br><span class="line">~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT     &lt;-- 允许访问22端口</span><br><span class="line"></span><br><span class="line">~]# iptables -A INPUT -p tcp --dport 80 -j ACCEPT     &lt;-- 允许访问80端口</span><br><span class="line"></span><br><span class="line">~]# iptables -A INPUT -p tcp --dport 21 -j ACCEPT     &lt;-- 允许ftp服务的21端口</span><br><span class="line"></span><br><span class="line">~]# iptables -A INPUT -p tcp --dport 20 -j ACCEPT     &lt;-- 允许FTP服务的20端口</span><br><span class="line"></span><br><span class="line">~]# iptables -A INPUT -j REJECT       &lt;-- 禁止其他未允许的规则访问</span><br><span class="line"></span><br><span class="line">~]# iptables -A FORWARD -j REJECT     &lt;-- 禁止其他未允许的规则访问</span><br></pre></td></tr></table></figure>
<p>#结语：<br>这里只要还是以理论为主，iptables还有SNAT  和 DNAT模式才是重点；</p>
<p><strong>NAT :</strong> </p>
<ul>
<li>请求报文： 修改源/ 目标IP，自由定义如何修改！</li>
<li>响应报文：修改源 源/ 目标IP ，根据跟踪机制自动实现！</li>
</ul>
<p><strong>SNAT ：</strong></p>
<ul>
<li>让本地网络中的主机通过某一特定地址访问外部网络，实现地址伪装！</li>
<li>请求报文：修改源IP</li>
</ul>
<p><strong>DNAT ：</strong></p>
<ul>
<li>把本地网络中的主机上的某服务开放给外部网络访问(发布服务和端口映射) ，但隐藏真实IP！</li>
<li>请求报文：修改目标IP</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>RAID技术简记</title>
    <url>/2020/02/17/raid/</url>
    <content><![CDATA[<p>##什么是廉价磁盘冗余阵列<strong>RAID</strong>？<br>###概念简述</p>
<blockquote>
<p><strong>顾</strong>名思义,廉价磁盘冗余阵列是一种将多个较小的磁盘整合成为一个较大的磁盘装置。从而达到<strong>数据存储</strong>和<strong>数据保护</strong>等功能！</p>
</blockquote>
<p>###数据保护<br>有多个磁盘组成的磁盘阵列固然能都做到数据存储的功能，那么又是怎么做到<strong>数据保护</strong>的功能呢？</p>
<blockquote>
<p>保护功能体现在讲一个将数据切割成多个分段，放在不同的物理磁盘上。这样就可以避免因为单块儿或者多块儿磁盘故障而导致的数据丢失问题。当然这里就需要借助于<code>**RAID**</code>技术的灵活运用来达到不同效果！</p>
</blockquote>
<a id="more"></a>
<hr>
<p>###RAID级别</p>
<blockquote>
<p>生产环境的不同和技术上的不断发展<strong>RAID</strong>技术也以不同的方式或级别被各方运用着。从而形成各种级别和方式。这里我简单的挑选个别级别来说一下。</p>
</blockquote>
<p>####RAID-0</p>
<blockquote>
<p><strong>RAID-0</strong>级别也叫条带卷，它主要实现方式是把一份数据切成多个分段连续存放磁盘阵列的每一个磁盘上，达到同时存取读写目的。它代表了所有<strong>RAID</strong>级别中最高的存储性能。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-9faa8137cd0cab73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RAID-0示意图"></p>
<p>#####RAID-0特性</p>
<blockquote>
<p>1.性能优秀<br>2.没有冗错性<br>3.磁盘利用率100%</p>
</blockquote>
<hr>
<p>####RAID-1</p>
<blockquote>
<p><strong>RAID-1</strong>级别也叫镜像卷，顾名思义它主要实现方式是两块磁盘同时读写数据。防止单个物理磁盘损坏导致的数据丢失。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e4f9c3de1f05dac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**RAID-1示意图**"></p>
<p>#####RAID-1特性</p>
<blockquote>
<p>1.安全性高<br>2.冗错性不错<br>3.磁盘利用率50%<br>4.读取性能高<br>5.成本高</p>
</blockquote>
<hr>
<p>####RAID-4</p>
<blockquote>
<p><strong>RAID-4</strong>级别的数据都是依次存储在多个硬盘之上，奇偶校验码存放在独立的奇偶校验盘上。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1a6857c0dc0e0dd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**RIAD -4示意图**"></p>
<p>所谓异性相吸，同性相斥。有了校验盘之后，数据块损坏了也可以通过校验位进行恢复。<br>#####RAID-4特性</p>
<blockquote>
<p>1.读取性能好<br>2.因为有校验位，冗错性不错<br>3.稳定性差</p>
</blockquote>
<hr>
<p>####RAID-5</p>
<blockquote>
<p><strong>RAID-5</strong>级别简单来讲就是RAID-4的升级版，不同于RAID-4的地方是它没有独立的校验盘，而是分散的。或者可以说它是RAID-1和RAID-0的拆中版。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b12f02de125f4ca0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**RAID-5**"><br>#####RAID-5特性</p>
<blockquote>
<p>1.性能不错<br>2.数据安全性好<br>3.冗错性不错<br>4.磁盘利用率为N-1/N</p>
</blockquote>
<hr>
<p>######Ps:上述都是我浅薄的认知。大牛们可以忽略本文章，如有问题我更希望大牛们不吝赐教。</p>
]]></content>
  </entry>
  <entry>
    <title>LVS负载均衡高可用集群及Sorry Server</title>
    <url>/2020/02/17/LVS%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E5%8F%8ASorryServer/</url>
    <content><![CDATA[<p>#实验环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. host1 host2 host3 host4 都是 CentOS7.3 系统；</span><br><span class="line">2. host3 host4 作为 Real Server，搭建Web服务；</span><br><span class="line">3. host1 host2 作为LVS负载均衡高可用集群；</span><br><span class="line">4. HA Cluster的配置前提：</span><br><span class="line">    (1) 各节点时间必须同步；</span><br><span class="line">            ntp, chrony</span><br><span class="line">    (2) 确保iptables及selinux不会成为阻碍；</span><br><span class="line">    (3) 各节点之间可通过主机名互相通信（对KA并非必须）；</span><br><span class="line">            建议使用&#x2F;etc&#x2F;hosts文件实现； </span><br><span class="line">    (4) 确保各节点的用于集群服务的接口支持MULTICAST（多播）通信；</span><br><span class="line">            D类：224-239</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>#配置Real Server</p>
<ul>
<li><strong>安装Nginx并修改测试页：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># RS1:</span><br><span class="line">[root@host3 ~]#yum -y install nginx</span><br><span class="line">[root@host3 ~]#echo &quot;&lt;h1&gt;RS1:host3&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html </span><br><span class="line">[root@host3 ~]#cat &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html                             </span><br><span class="line">&lt;h1&gt;RS1:host3&lt;&#x2F;h1&gt;</span><br><span class="line">[root@host3 ~]#systemctl start nginx</span><br><span class="line">[root@host3 ~]#ss -ntl</span><br><span class="line">State      Recv-Q Send-Q                                         Local Address:Port</span><br><span class="line">LISTEN     0      128                                                        *:80</span><br><span class="line">LISTEN     0      128                                                        *:22</span><br><span class="line">LISTEN     0      100                                                127.0.0.1:25 </span><br><span class="line">LISTEN     0      128                                                       :::80</span><br><span class="line">LISTEN     0      128                                                       :::22</span><br><span class="line">LISTEN     0      100                                                      ::1:25 </span><br><span class="line">[root@host3 ~]#</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"># RS2:</span><br><span class="line">[root@host4 ~]#yum -y install nginx </span><br><span class="line">[root@host4 ~]#echo &quot;&lt;h1&gt;RS2:host4&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html </span><br><span class="line">[root@host4 ~]#cat &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html </span><br><span class="line">&lt;h1&gt;RS2:host4&lt;&#x2F;h1&gt;</span><br><span class="line">[root@host4 ~]#systemctl start nginx             </span><br><span class="line">[root@host4 ~]#ss -ntl</span><br><span class="line">State      Recv-Q Send-Q                                         Local Address:Port              </span><br><span class="line">LISTEN     0      128                                                        *:80                  </span><br><span class="line">LISTEN     0      128                                                        *:22                  </span><br><span class="line">LISTEN     0      100                                                127.0.0.1:25                 </span><br><span class="line">LISTEN     0      128                                                       :::80                  </span><br><span class="line">LISTEN     0      128                                                       :::22                  </span><br><span class="line">LISTEN     0      100                                                      ::1:25                  </span><br><span class="line">[root@host4 ~]#</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"># 测试：</span><br><span class="line">&gt;.host1:</span><br><span class="line">[root@host1 ~]#curl http:&#x2F;&#x2F;192.168.10.13</span><br><span class="line">&lt;h1&gt;RS1:host3&lt;&#x2F;h1&gt;</span><br><span class="line">[root@host1 ~]#curl http:&#x2F;&#x2F;192.168.10.14</span><br><span class="line">&lt;h1&gt;RS2:host4&lt;&#x2F;h1&gt;</span><br><span class="line">[root@host1 ~]#</span><br><span class="line">&gt;.host2:</span><br><span class="line">[root@host2 ~]#curl http:&#x2F;&#x2F;192.168.10.13</span><br><span class="line">&lt;h1&gt;RS1:host3&lt;&#x2F;h1&gt;</span><br><span class="line">[root@host2 ~]#curl http:&#x2F;&#x2F;192.168.10.14</span><br><span class="line">&lt;h1&gt;RS2:host4&lt;&#x2F;h1&gt;</span><br><span class="line">[root@host2 ~]#</span><br></pre></td></tr></table></figure></li>
<li><strong>修改RS的内核参数并配置VIP</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-dce3ce2c18277f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RS1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-cea0e67e21aa9e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RS1上给权限"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c3e19be59440522d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RS1上执行脚本并查看lo:0的IP地址"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-80f57e2c2ee9affc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RS2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f7d75c7e7a084343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RS2上给权限"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-6205ca2d9bb6aa41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RS2上执行脚本并查看lo:0的IP地址"></p>
<p>#搭建LVS集群</p>
<blockquote>
<p><em>给两台VS服务器 <code>host1 host2</code>上 安装 <code>ipvsadm</code> 和 <code>keepalived</code></em></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># VS1：</span><br><span class="line">[root@host1 ~]#yum -y install ipvsadm keepalived</span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line"></span><br><span class="line"># VS2：</span><br><span class="line">[root@host2 ~]#yum -y install ipvsadm keepalived</span><br></pre></td></tr></table></figure>
<p>#配置LVS高可用集群服务器</p>
<ul>
<li><strong>配置VS服务器host1的keepalived服务并启动：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#cat keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER                       &lt;-- 配置 host1 为 MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.88                  &lt;-- 虚拟 IP 为 VIP</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.10.88 80 &#123;      &lt;-- 配置 VS 服务器 host1</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr                         &lt;-- LVS调度算法</span><br><span class="line">    lb_kind DR                         &lt;--LVS工作模式</span><br><span class="line">    nat_mask 255.255.255.255</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.10.13 80 &#123;      &lt;-- 添加第一台 RS服务器 host3</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">              path &#x2F;</span><br><span class="line">              status_code 200 </span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 2</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 1</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    real_server 192.168.10.14 80 &#123;       &lt;--添加第二台RS服务器 host4</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">              path &#x2F;</span><br><span class="line">              status_code 200 </span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 2</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@host1 keepalived]#systemctl start keepalived</span><br></pre></td></tr></table></figure></li>
<li><strong>配置VS服务器host2的keepalived服务并启动：</strong><blockquote>
<p>只需把<strong><code>vrrp_instance VI_1</code></strong>的<strong><code>state</code></strong>改为<strong><code>BACKUP</code></strong>即可，其他与<strong><code>VS1</code></strong>保持一致</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#cat keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP                        &lt;-- 配置 host2 为 BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.88                  &lt;-- 虚拟 IP 为 VIP</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.10.88 80 &#123;      &lt;-- 配置 VS 服务器 host2</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr                         &lt;-- LVS调度算法</span><br><span class="line">    lb_kind DR                         &lt;--LVS工作模式</span><br><span class="line">    nat_mask 255.255.255.255</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 192.168.10.13 80 &#123;      &lt;-- 添加第一台 RS服务器 host3</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">              path &#x2F;</span><br><span class="line">              status_code 200 </span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 2</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 1</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    real_server 192.168.10.14 80 &#123;       &lt;--添加第二台RS服务器 host4</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">              path &#x2F;</span><br><span class="line">              status_code 200 </span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 2</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@host2 keepalived]#systemctl start keepalived</span><br></pre></td></tr></table></figure>
#测试：</li>
</ul>
<p><strong>如何测试的详细步骤我就不细写了，贴个图意思意思下：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-073ebf7eb165b7f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>#Sorry Server</p>
<blockquote>
<p><strong>在两台VS上也安装Nginx，设置页面内容为Say sorry的message！</strong></p>
</blockquote>
<ul>
<li><strong>VS1上：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#yum -y install nginx</span><br><span class="line">[root@host1 keepalived]#echo &quot;&lt;h1&gt;Sorry from Director 1&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host1 keepalived]#systemctl start nginx</span><br></pre></td></tr></table></figure></li>
<li><strong>VS2上：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host2 keepalived]#yum -y install nginx</span><br><span class="line">[root@host2 keepalived]#echo &quot;&lt;h1&gt;Sorry from Director 2&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host2 keepalived]#systemctl start nginx</span><br></pre></td></tr></table></figure></li>
<li><strong>编辑配置文件：</strong><blockquote>
<p>很简单，只需在两台VS的配置文件keepalived.conf的virtual_server里加一行sorry_server 127.0.0.1 80 即可！</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-6d17043b132db34c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>测试Sorry Server 的效果：</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-5fc721f70245e8a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
]]></content>
  </entry>
  <entry>
    <title>keepalived双主模型实验</title>
    <url>/2020/02/17/keepalived%E5%8F%8C%E4%B8%BB%E6%A8%A1%E5%9E%8B%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><strong>双主模型对于vrrp来讲实际上也是单主模型，所不同的是在同一组接口上配置了多个虚拟路由器；有几个物理路由就配置几个虚拟路由，所以所谓多主就是让每一个物理节点都工作起来；</strong><ul>
<li><em>注意：配置多个虚拟路由器，每个虚拟路由器都要用独立的专用的VIP！</em></li>
</ul>
</li>
<li><strong>双主模型在互联网上的工作原理很简单，就是DNS域名解析服务器上为域名配置两条A记录，两个虚拟路由IP分别都指向同一个域名！</strong><ul>
<li><em>就双主而言，因为两个同时工作，DNS也有两条虚拟IP指向同一个域名的A记录，一个节点down掉了也同样能工作，这既起到了高可用功能，也起到了负载均衡的功能；</em></li>
</ul>
</li>
</ul>
</blockquote>
<a id="more"></a>
<p><strong>配置节点一：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#vim keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.66</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;           &lt;-- 节点一上的第二个虚拟路由器的配置；</span><br><span class="line">    state BACKUP               &lt;-- 节点一上的第二个虚拟路由器设为BACKUP，MASTER正常时处于就绪监听状态；</span><br><span class="line">    interface ens33            &lt;-- 接口不变</span><br><span class="line">    virtual_router_id 79       &lt;-- 不能跟其他虚拟路由相同；</span><br><span class="line">    priority 95                &lt;-- 因为是BACKUP，优先级要低于节点二的第二个虚拟路由器的MASTER;</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nRyVIaY2     &lt;-- 这里各虚拟路由器不能相同！</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.77          &lt;-- 不同的虚拟路由器，IP地址也肯定不能相同；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line">&quot;keepalived.conf&quot; 165L, 3807C written</span><br><span class="line">[root@host1 keepalived]#</span><br></pre></td></tr></table></figure>
<p><strong>配置节点二：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host2 keepalived]#vim keepalived.conf </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 95</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.66</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_2 &#123;           &lt;-- 节点二上的第二个虚拟路由器的配置；</span><br><span class="line">    state MASTER               &lt;-- 节点二上这里变成MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 79</span><br><span class="line">    priority 100               &lt;-- 优先级高于节点一的第二个虚拟路由器；</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nRyVIaY2</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.77</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line">&quot;keepalived.conf&quot; 165L, 3807C written</span><br><span class="line">[root@host2 keepalived]#</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>到这里双主模式就配置好了！</strong></p>
</blockquote>
<p><strong>测试：</strong></p>
<ul>
<li><strong>设定节点二故障：</strong><blockquote>
<p>启动节点一的keepalived服务，关闭节点二的keepalived服务；查看节点一的状态；</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-26406f1d337019c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>节点二上也启动keepalived服务：</strong><blockquote>
<p>两个节点都启动keepalived服务，并查看状态和接口IP地址信息；</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-df090f56e129a3c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点一的keepalived服务状态及ens33接口的IP信息"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1ec8c649c66892f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点二的keepalived服务状态及接口ens33的IP信息"></p>
<ul>
<li><strong>设定节点一故障：</strong><blockquote>
<p>关闭节点一的keepalived服务，在节点二上查看keepalived状态;</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-aa7e422d2ec9afc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点二的状态"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e75a261af3b37679.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点一的状态"></p>
<p><strong>就像上面测试的，你多来几遍，看看状态，看看设置虚拟路由接口的虚拟IP变化…</strong></p>
]]></content>
  </entry>
  <entry>
    <title>LVS-NAT工作模式</title>
    <url>/2020/02/17/LVS-NAT%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-994ddb19d3410e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<blockquote>
<p>什么是LVS？<br>你认为是一个机器，殊不知身后有一群机器；<br>Linux Virtual Server，负载调度器，集成内核；<br>工作原理：VS根据请求报文的目标IP和目标协议及端口将其调度转发至某RS，根据调度算法来挑选RS；<br>#实验环境</p>
</blockquote>
<ul>
<li>CIP 与 VIP 为同一网段IP地址</li>
<li>DIP 与 RIP 为同一网段IP地址</li>
<li>VS服务器两个网卡</li>
<li>RS服务器一个网卡</li>
<li>关闭防火墙策略和SELinux</li>
<li>两个RS服务器网关指向VS的DIP<a id="more"></a>
#配置lvs<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@MiNi_7 ~]#echo &#39;net.ipv4.ip_forward &#x3D; 1&#39; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf  &lt;-- 开启转发功能</span><br><span class="line">[root@MiNi_7 ~]#sysctl -p  &lt;-- 生效</span><br><span class="line">[root@MiNi_7 ~]#ipvsadm -A -t CIP：80 -s rr    &lt;--生成lvs调度器；rr是轮询调度算法</span><br><span class="line">[root@MiNi_7 ~]#ipvsadm -a -t CIP：80 -r RIP1 -m    </span><br><span class="line">[root@MiNi_7 ~]#ipvsadm -a -t CIP：80 -r RIP2 -m</span><br></pre></td></tr></table></figure>
#测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@MiNi_7 ~]#for i in &#123;1..100&#125;;do curl CIP：80;sleep 1;done</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>keepalived高可用Nginx Proxy服务</title>
    <url>/2020/02/17/keepalived%E9%AB%98%E5%8F%AF%E7%94%A8Nginx-Proxy%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>准备四台主机为host（1-4）；</li>
<li>host1 host2上配置Nginx调度服务和keepalived服务；</li>
<li>主机host3和主机host4提供Web服务<ul>
<li>host1：192.168.10.11</li>
<li>host2：192.168.10.12</li>
<li>host3：192.168.10.13</li>
<li>host4：192.168.10.14</li>
</ul>
</li>
</ul>
</blockquote>
<a id="more"></a>
<p>#安装服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装服务：给四台主机分别安装所需服务应用</span><br><span class="line"></span><br><span class="line">[root@host1 ~]#yum -y install nginx keepalived</span><br><span class="line">[root@host2 ~]#yum -y install nginx keepalived</span><br><span class="line">[root@host3 ~]#yum -y install nginx </span><br><span class="line">[root@host3 ~]#yum -y install nginx</span><br><span class="line"></span><br><span class="line">#编辑测试页：直接把内容重定向即可</span><br><span class="line"></span><br><span class="line">[root@host1 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host2 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host3 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host4 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>#两台Nginx调度主机上配置Nginx Proxy服务<br><strong>主机host1上配置Nginx Proxy服务：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-4fb2685f2ff03ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>主机host2上配置Nginx Proxy服务：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-8d17db77b8c13850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#两台Nginx调度主机上配置keepalived服务</p>
<blockquote>
<ul>
<li><strong>这里我采用单主模式！也可以双主模式，双主模式也很简单，keepalived配置文件里再vrrp_instance即可；</strong></li>
<li><strong>这里我定义了两个脚本，稍微演示下keepalived的script功能；</strong></li>
</ul>
</blockquote>
<p><strong>主机host1上配置keepalived服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#cat keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_down &#123;             # 定义的脚本，意思是&#x2F;etc&#x2F;keepalived目录下有down文件就虚拟IP地质转移</span><br><span class="line">   script &quot;[[ -f &#x2F;etc&#x2F;keepalived&#x2F;down ]] &amp;&amp; exit 1 || exit 0&quot;</span><br><span class="line">   interval 1                      # 检测间隔</span><br><span class="line">   weight -10                      # 降权，也就是减去优先级多少值</span><br><span class="line">   fall 2                          # 检测到两次错误才发生转移</span><br><span class="line">   rise 1                          # 至少正常1次才算正常</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;            # 定义的脚本，意思是Nginx进程是否在运行，如果没有就虚拟IP地址转移；</span><br><span class="line">        script &quot;killall -0 nginx &amp;&amp; exit 0 || exit 1&quot;</span><br><span class="line">        interval 2</span><br><span class="line">        weight -10</span><br><span class="line">        fall 2</span><br><span class="line">        rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.88</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        track_script &#123;               # 调用定义的脚本</span><br><span class="line">                chk_down</span><br><span class="line">                chk_nginx</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@host1 keepalived]#</span><br></pre></td></tr></table></figure>
<p><strong>主机host2上配置keepalived服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host2 keepalived]#cat keepalived.conf </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host2</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_down &#123;</span><br><span class="line">   scrip &quot;[[ -f &#x2F;etc&#x2F;keepalived&#x2F;down ]] &amp;&amp; exit 1 || exit 0&quot;</span><br><span class="line">   interval 1</span><br><span class="line">   weight -10</span><br><span class="line">   fall 2</span><br><span class="line">   rise 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_sript chk_nginx &#123;</span><br><span class="line">   script &quot;killall -0 nginx&quot;</span><br><span class="line">   interval 2</span><br><span class="line">   weight -10</span><br><span class="line">   fall 2</span><br><span class="line">   rise 2</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP     &lt;-- 这里是BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 95</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.88</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;                # 调用定义的脚本</span><br><span class="line">        chk_nginx</span><br><span class="line">        chk_down</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在四台主机上启动各自的服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<p>#测试：</p>
<ul>
<li><p><strong>1. 关闭主机host1的Nginx：systemctl stop nginx</strong></p>
<ul>
<li>查看host2的keepalived状态和IP地址<br><img src="http://upload-images.jianshu.io/upload_images/6121564-14ccd9b191482cc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="host2"></li>
<li>客户端上测试是否能够访问后端Web服务<br><img src="http://upload-images.jianshu.io/upload_images/6121564-411329ab8314ce60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在客户端主机上"></li>
</ul>
</li>
<li><p><strong>2. 测试调用脚本：这里只检测一项脚本</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-65c8b9a8ca73f487.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试脚本，创建down文件和删除down文件，兼顾查看IP"></p>
</li>
</ul>
<h2 id><a href="#" class="headerlink" title></a><img src="http://upload-images.jianshu.io/upload_images/6121564-54b9ffe0e24e7890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注意降权和地址漂移"></h2>]]></content>
  </entry>
  <entry>
    <title>LVM逻辑卷管理</title>
    <url>/2020/02/17/LVM/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-435423206449ba79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>###什么是LV逻辑卷？<br><strong>逻辑卷</strong>是将一个或多个物理分区或块设备整合在一起形成一种逻辑层。可以使独立的硬盘，也可以是独立的分区。</p>
<p>###逻辑卷结构视图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f5104b18c38e0460.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="逻辑卷生成拓扑图"></p>
<a id="more"></a>
<p><strong>上图</strong>画的或许不是那么标准，但是也能大体看出逻辑卷的结构。下面从下而上简单说明下：</p>
<blockquote>
<p>1.” <strong><code>~]#</code></strong> “ 表示命令提示符<br>2.” <strong><code>#/  /#</code></strong> “ 表示添加的注释内容</p>
</blockquote>
<p>1.最下层是有一些硬盘或硬盘分区等组成；</p>
<p>2.下数第二层是<strong>物理卷</strong>（PV）；<strong><code>pvcreate</code></strong>命令是生成物理卷的命令，后面跟那些物理分区或块设备；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# pvcreate  &#x2F;dev&#x2F;sd&#123;b1,c,d2,e&#125;   #&#x2F; pvcreat 命令后面跟要做成物理卷的物理分区或块设备 &#x2F;#</span><br><span class="line">~]# pvdisplay                      #&#x2F; &quot;pvdisplay&quot; 命令是详细列出系统上面每个物理卷的信息 &#x2F;#</span><br></pre></td></tr></table></figure>

<p>3.下数第三层是<strong>卷组</strong>（VG）；<strong><code>vgcreate</code></strong>命令是把物理卷做成卷组的命令，后面跟卷组名称(按实际情况自定义)和物理卷名称；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# vgcreate vg0 -s 16M &#x2F;dev&#x2F;sd&#123;b1,c,d2,e&#125;    #&#x2F; &quot;vg0&quot;是给卷组起的名称；&quot;-s 16M&quot; 是PE值大小 &#x2F;#</span><br><span class="line">~]# vgdisplay                                 #&#x2F; 列出卷组的详细信息 &#x2F;#</span><br></pre></td></tr></table></figure>

<p>4.最上面一层，就是我们的<strong>逻辑卷</strong>(LV)；<strong><code>lvcreate</code></strong>是从卷组生成逻辑卷的命令，后面写逻辑卷的名称、逻辑卷的大小和卷组名称；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# lvcreate -n lv0 -l 666 &#x2F;dev&#x2F;vg0      #&#x2F; &quot;-n&quot;后面跟逻辑卷的名称；&quot;-l&quot;后面跟PE的个数；最后是卷组名称； &#x2F;#</span><br><span class="line">~]# lvcreate -n lv0 -L 20G &#x2F;dev&#x2F;vg0      #&#x2F; &quot;-L&quot;大写的后面是逻辑卷容量大小（M,G）&#x2F;#</span><br><span class="line">~]# lvdisplay                            #&#x2F; 列出逻辑卷的详细信息 &#x2F;#</span><br></pre></td></tr></table></figure>

<p><strong><code>上面差不多已经讲完了如何生成逻辑卷LV了！剩下的步骤不外乎就是:对LV做文件系统--&gt;创建挂载点--&gt;把LV挂载上去--&gt;正常使用即可</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# mkfs.ext4  &#x2F;dev&#x2F;vg0&#x2F;lv0        #&#x2F; 特别注意：这里的逻辑卷名称是LV的全名！为什么？请看lvdisplay结果 &#x2F;#</span><br><span class="line">~]# mkdir  &#x2F;mnt&#x2F;lv0                #&#x2F; 创建挂载逻辑卷的挂载点目录 &#x2F;#</span><br><span class="line">~]# mount  &#x2F;dev&#x2F;vg0&#x2F;lv0  &#x2F;mnt&#x2F;lv0  #&#x2F; 挂载逻辑卷 &#x2F;#</span><br></pre></td></tr></table></figure>

<hr>
<p>###为什么要用逻辑卷管理？</p>
<blockquote>
<p><strong>LVM</strong>的重点在于可以弹性调整文件系统的容量！或者说它有在线可扩展性！</p>
</blockquote>
<p><strong>大</strong>白话说的话，一个逻辑卷空间不够了你可以从卷组中调出来一部分容量分给它；反过来也可以缩减它的空间大小等等可在线扩展操作。</p>
<blockquote>
<p>以下是从百度百科搬过来的关于LVM优点的说法，说的很对我就借花献佛了~</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LVM与直接使用物理存储相比,有以下优点:</span><br><span class="line">1. 灵活的容量</span><br><span class="line">当使用逻辑卷时,文件系统可以扩展到多个磁盘上,你可以聚合多个磁盘或磁盘分区成单一的逻辑卷.</span><br><span class="line">2.可伸缩的存储池</span><br><span class="line">你可以使用简单的命令来扩大或缩小逻辑卷大小,不用重新格式化或分区磁盘设备.</span><br><span class="line">3.在线的数据再分配</span><br><span class="line">你可以在线移动数据,数据可以在磁盘在线的情况下重新分配.比如,你可以在线更换可热插拔的磁盘.</span><br><span class="line">4. 方便的设备命名</span><br><span class="line">逻辑卷可以按你觉得方便的方式来起任何名称.</span><br><span class="line">5.磁盘条块化.</span><br><span class="line">你可以生成一个逻辑盘,它的数据可以被条块化存储在2个或更多的磁盘上.这样可以明显提升数据吞吐量</span><br><span class="line">6.镜像卷</span><br><span class="line">逻辑卷提供方便的方法来镜像你的数据.</span><br><span class="line">7.卷快照</span><br><span class="line">使用逻辑卷,你可以获得设备快照用来一致性备份或者测试数据更新效果而不影响真实数据.</span><br></pre></td></tr></table></figure>
<hr>
<p>###实验：扩展LV容量</p>
<p><strong>下</strong>面我做做一个在线扩展LV的实验体会体会LVM逻辑卷管理的特性还有相关命令的运用</p>
<blockquote>
<p>1.” <strong><code>~]#</code></strong> “ 表示命令提示符<br>2.” <strong><code>#/  /#</code></strong> “ 表示添加的注释内容</p>
</blockquote>
<p>#####第一步：用<strong><code>lsblk</code></strong>命令查看有没有空闲的硬盘可以让我们拿来用于增加LV容量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#lsblk</span><br><span class="line">NAME              MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">sdb                 8:16   0   20G  0 disk </span><br><span class="line">└─vgtest-lvtest   253:0    0   30G  0 lvm  </span><br><span class="line">sdc                 8:32   0   50G  0 disk        #&#x2F; 发现sdc盘是50G的空间满足实验需求 &#x2F;#</span><br><span class="line">├─sdc1              8:33   0   10G  0 part </span><br><span class="line">│ └─vgtest-lvtest 253:0    0   30G  0 lvm  </span><br><span class="line">└─sdc2              8:34   0    5G  0 part </span><br><span class="line">sdd                 8:48   0  100G  0 disk </span><br><span class="line">sr0                11:0    1  7.7G  0 rom  &#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64</span><br></pre></td></tr></table></figure>

<p><strong>查</strong>看硬盘信息发现<strong><code>/dev/sdc</code></strong>硬盘满足我们的实验需求！</p>
<hr>
<p>#####第二步:用<strong><code>fdisk</code></strong>命令增加一分区</p>
<blockquote>
<p>在增加分区的时候需要注意标记新增分区用途的类别</p>
</blockquote>
<p><strong>先</strong>分区~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#fdisk &#x2F;dev&#x2F;sdc</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): p                               #&#x2F; 这是打印硬盘分区信息 &#x2F;#</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;sdc1            2048    20973567    10485760   8e  Linux LVM</span><br><span class="line">&#x2F;dev&#x2F;sdc2        20973568    31459327     5242880   83  Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): u                              #&#x2F; &quot;u&quot;是切换扇区和柱面 &#x2F;#</span><br><span class="line">Changing display&#x2F;entry units to cylinders (DEPRECATED!).</span><br><span class="line"></span><br><span class="line">Command (m for help): n                              #&#x2F; &quot;n&quot;是开始分区 &#x2F;#                                              </span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (2 primary, 0 extended, 2 free)       #&#x2F; 这里的&quot;p&quot;主分区 &#x2F;#</span><br><span class="line">   e   extended                                      #&#x2F; 这里的&quot;e&quot;扩展分区 &#x2F;#</span><br><span class="line">Select (default p): p                                #&#x2F; 这里我分一个主分区 &#x2F;#</span><br><span class="line">Partition number (3,4, default 3): 3                 #&#x2F; 选择主分区编号为3 &#x2F;#</span><br><span class="line">First cylinder (1959-6527, default 1959): </span><br><span class="line">Using default value 1959</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1959-6527, default 6527): +10G    #&#x2F; 分10G大小 &#x2F;#</span><br><span class="line">Partition 3 of type Linux and of size 10 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): t                              #&#x2F; 这是标记分区类别 &#x2F;#</span><br><span class="line">Partition number (1-3, default 3): 3                 #&#x2F; 输入第几个分区 &#x2F;#</span><br><span class="line">Hex code (type L to list all codes): L               #&#x2F; 大写&quot;L&quot;可以查看各种分区类别编号 &#x2F;#</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line">      </span><br><span class="line">Hex code (type L to list all codes): 8e              #&#x2F; &quot;8e&quot;是用于逻辑卷的分区类别标记 &#x2F;#</span><br><span class="line">Changed type of partition &#39;Linux&#39; to &#39;Linux LVM&#39;</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;sdc1               1        1306    10485760   8e  Linux LVM</span><br><span class="line">&#x2F;dev&#x2F;sdc2            1306        1959     5242880   83  Linux</span><br><span class="line">&#x2F;dev&#x2F;sdc3            1959        3265    10488832   8e  Linux LVM </span><br><span class="line"></span><br><span class="line">Command (m for help): w                              #&#x2F; &quot;w&quot;是存盘退出 &#x2F;#</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: Device or resource busy.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

<p><strong>同</strong>步分区信息：用<strong><code>partprobe</code></strong>命令同步<del>并用<strong><code>lsblk</code></strong>查看分区信息</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#partprobe                                         #&#x2F; 把分区信息同步在内存里 &#x2F;#</span><br><span class="line">Warning: Unable to open &#x2F;dev&#x2F;sr0 read-write (Read-only file system).  </span><br><span class="line">&#x2F;dev&#x2F;sr0 has been opened read-only.</span><br><span class="line"></span><br><span class="line">~]#lsblk                                             #&#x2F; 查看硬盘信息，是否分区成功 &#x2F;#</span><br><span class="line">NAME              MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">sdc                 8:32   0   50G  0 disk </span><br><span class="line">├─sdc1              8:33   0   10G  0 part </span><br><span class="line">│ └─vgtest-lvtest 253:0    0   30G  0 lvm  </span><br><span class="line">├─sdc2              8:34   0    5G  0 part </span><br><span class="line">└─sdc3              8:35   0   10G  0 part</span><br></pre></td></tr></table></figure>

<hr>
<p>#####第三步：用<strong><code>pvcreate</code></strong>命令把<strong><code>/dev/sd3</code></strong>生成物理卷并用<strong><code>pvdisplay</code></strong>查看物理卷详细信息<br><strong>先</strong>生成物理卷~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#pvcreate &#x2F;dev&#x2F;sdc3</span><br><span class="line">  Physical volume &quot;&#x2F;dev&#x2F;sdc3&quot; successfully created.</span><br></pre></td></tr></table></figure>
<p><strong>查</strong>看物理卷详细信息~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#pvdisplay </span><br><span class="line">  --- Physical volume ---</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line">   </span><br><span class="line">  &quot;&#x2F;dev&#x2F;sdc3&quot; is a new physical volume of &quot;10.00 GiB&quot;     #&#x2F; 这里就是我们新生成的物理卷信息 &#x2F;#</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               &#x2F;dev&#x2F;sdc3                         #&#x2F; 物理卷名称 &#x2F;#</span><br><span class="line">  VG Name                                                 #&#x2F; 注意，这里的卷组信息还是空的，因为还没划分给卷组 &#x2F;#</span><br><span class="line">  PV Size               10.00 GiB                         #&#x2F; 新增物理卷大小 &#x2F;#</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0   </span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               81cHlt-osRn-I2Lc-faE6-36GN-ShzX-eHTfGJ</span><br></pre></td></tr></table></figure>

<hr>
<p>#####第四步：用<strong><code>vgextend</code></strong>命令把新的物理卷添加至卷组并用<strong><code>vgdisplay</code></strong>命令查看卷组详细信息</p>
<p><strong>开</strong>始之前先看看卷组信息，可以可以做对比，这样会更直接些。关键点我都有注释的哦~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#vgdisplay </span><br><span class="line">  --- Volume group ---</span><br><span class="line"></span><br><span class="line">#&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">  VG Size               29.97 GiB                   #&#x2F; 卷组大小为30G &#x2F;#</span><br><span class="line">  PE Size               16.00 MiB</span><br><span class="line">  Total PE              1918</span><br><span class="line">  Alloc PE &#x2F; Size       1918 &#x2F; 29.97 GiB</span><br><span class="line">  Free  PE &#x2F; Size       0 &#x2F; 0                       #&#x2F; 没有可用PE &#x2F;#</span><br><span class="line">  VG UUID               kbBjKq-iFnA-fQSH-IK5w-EDFl-FFSL-uLSil9</span><br></pre></td></tr></table></figure>
<p><strong>现</strong>在我们开始用<strong><code>vdextend</code></strong>命令增加卷组容量~</p>
<blockquote>
<p><strong><code>vgextend</code></strong>命令用于动态扩展LVM卷组，它通过向卷组中添加物理卷来增加卷组的容量。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#vgextend vgtest &#x2F;dev&#x2F;sdc3                       #&#x2F; 把物理卷&quot;&#x2F;dev&#x2F;sdc3&quot;添加至卷组&quot;vgtest&quot;中 &#x2F;#</span><br><span class="line">  Volume group &quot;vgtest&quot; successfully extended</span><br><span class="line">~]#vgdisplay                                       #&#x2F; 查看卷组详细信息 &#x2F;#</span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vgtest</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        3</span><br><span class="line">  Metadata Sequence No  6</span><br><span class="line">  VG Access             read&#x2F;write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                1</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                3</span><br><span class="line">  Act PV                3</span><br><span class="line">  VG Size               39.97 GiB                   #&#x2F; 可以看出眷组空间大小从之前只有30G变成目前的40G &#x2F;#</span><br><span class="line">  PE Size               16.00 MiB</span><br><span class="line">  Total PE              2558</span><br><span class="line">  Alloc PE &#x2F; Size       1918 &#x2F; 29.97 GiB</span><br><span class="line">  Free  PE &#x2F; Size       640 &#x2F; 10.00 GiB             #&#x2F; 这里多出来10G的可用PE &#x2F;#</span><br><span class="line">  VG UUID               kbBjKq-iFnA-fQSH-IK5w-EDFl-FFSL-uLSil9</span><br></pre></td></tr></table></figure>

<hr>
<p>#####第五步：用<strong><code>lvextend</code></strong>命令增加逻辑卷的容量，并用<strong><code>lvdisplay</code></strong>查看逻辑卷详细信息<br><strong>同</strong>样在开始之前我们先看看逻辑卷信息，看看它大小是多少~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#lvdisplay </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                &#x2F;dev&#x2F;vgtest&#x2F;lvtest        #&#x2F; 这才是逻辑卷的名称 &#x2F;#</span><br><span class="line">  LV Name                lvtest</span><br><span class="line">  VG Name                vgtest</span><br><span class="line">  LV UUID                5IMYwN-9JZS-4KB1-ofFq-WpVn-OVv6-XOCfhL</span><br><span class="line">  LV Write Access        read&#x2F;write</span><br><span class="line">  LV Creation host, time CentOS7.Wxg, 2017-06-24 20:17:47 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  # open                 0</span><br><span class="line">  LV Size                29.97 GiB                  #&#x2F; 逻辑卷大小是30G &#x2F;#</span><br><span class="line">  Current LE             1918</span><br><span class="line">  Segments               2</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     8192</span><br><span class="line">  Block device           253:0</span><br></pre></td></tr></table></figure>
<p><strong>现</strong>在我们开始用<strong><code>lvextend</code></strong>命令给逻辑卷增加容量<del>就给他增加个5G容量吧</del></p>
<blockquote>
<p><strong>lvextend</strong>命令用于在线扩展逻辑卷的空间大小，而不中断应用程序对逻辑卷的访问</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#lvextend -r -L +5G &#x2F;dev&#x2F;vgtest&#x2F;lvtest            #&#x2F; 给LV新增加5G的容量,注意增加容量时要有&quot;+&quot;号 &#x2F;#</span><br><span class="line"></span><br><span class="line">      #&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">~]#lvdisplay </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                &#x2F;dev&#x2F;vgtest&#x2F;lvtest</span><br><span class="line">  LV Name                lvtest</span><br><span class="line">  VG Name                vgtest</span><br><span class="line">  LV UUID                5IMYwN-9JZS-4KB1-ofFq-WpVn-OVv6-XOCfhL</span><br><span class="line">  LV Write Access        read&#x2F;write</span><br><span class="line">  LV Creation host, time CentOS7.Wxg, 2017-06-24 20:17:47 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  # open                 0</span><br><span class="line">  LV Size                34.97 GiB                 #&#x2F; 注意到没有，从之前的30G变成现在的35G了 &#x2F;#</span><br><span class="line">  Current LE             2238</span><br><span class="line">  Segments               3</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     8192</span><br><span class="line">  Block device           253:0</span><br></pre></td></tr></table></figure>

<p><strong>如</strong>果还看不出差别的话，我回过头去看看卷组的信息，看看自由<strong>PE</strong>值是否从<strong>10G</strong>减少到<strong>5G</strong>了~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]#vgdisplay </span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vgtest</span><br><span class="line">               </span><br><span class="line"> #&#x2F;---------此处省略----------&#x2F;#</span><br><span class="line"></span><br><span class="line">  Alloc PE &#x2F; Size       2238 &#x2F; 34.97 GiB</span><br><span class="line">  Free  PE &#x2F; Size       320 &#x2F; 5.00 GiB             #&#x2F; 注意到没有，从之前的10G变成现在的5G了 &#x2F;#</span><br><span class="line">  VG UUID               kbBjKq-iFnA-fQSH-IK5w-EDFl-FFSL-uLSil9</span><br></pre></td></tr></table></figure>
<hr>
<p>###结语：<br><strong>通</strong>过这个<strong>扩展LV</strong>的实验我们很直观的体会到在线管理逻辑卷的优势，可以有效避免一些不必要的麻烦。</p>
<p><strong>当</strong>然逻辑卷管理除了<strong>扩展LV</strong>还有很多其他功能，例如可以<strong>缩减LV</strong>避免不必要的空间浪费、可以<strong>移除PV</strong>及时更换老旧的硬盘、可以<strong>跨主机迁移LV</strong>不丢数据的前提下脱离老旧主机迁到新的主机上等等强大的功能都可以实现。在这我就不分别做实验来证明啦~</p>
]]></content>
  </entry>
  <entry>
    <title>keepalived高可用Nginx Proxy服务</title>
    <url>/2020/02/17/keepalived%E9%AB%98%E5%8F%AF%E7%94%A8Nginx/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>准备四台主机为host（1-4）；</li>
<li>host1 host2上配置Nginx调度服务和keepalived服务；</li>
<li>主机host3和主机host4提供Web服务<ul>
<li>host1：192.168.10.11</li>
<li>host2：192.168.10.12</li>
<li>host3：192.168.10.13</li>
<li>host4：192.168.10.14</li>
</ul>
</li>
</ul>
</blockquote>
<a id="more"></a>
<p>#安装服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装服务：给四台主机分别安装所需服务应用</span><br><span class="line"></span><br><span class="line">[root@host1 ~]#yum -y install nginx keepalived</span><br><span class="line">[root@host2 ~]#yum -y install nginx keepalived</span><br><span class="line">[root@host3 ~]#yum -y install nginx </span><br><span class="line">[root@host3 ~]#yum -y install nginx</span><br><span class="line"></span><br><span class="line">#编辑测试页：直接把内容重定向即可</span><br><span class="line"></span><br><span class="line">[root@host1 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host2 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host3 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">[root@host4 ~]#echo &quot;&lt;h1&gt;测试页内容&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<p>#两台Nginx调度主机上配置Nginx Proxy服务<br><strong>主机host1上配置Nginx Proxy服务：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-4fb2685f2ff03ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>主机host2上配置Nginx Proxy服务：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-8d17db77b8c13850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#两台Nginx调度主机上配置keepalived服务</p>
<blockquote>
<ul>
<li><strong>这里我采用单主模式！也可以双主模式，双主模式也很简单，keepalived配置文件里再vrrp_instance即可；</strong></li>
<li><strong>这里我定义了两个脚本，稍微演示下keepalived的script功能；</strong></li>
</ul>
</blockquote>
<p><strong>主机host1上配置keepalived服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#cat keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_down &#123;             # 定义的脚本，意思是&#x2F;etc&#x2F;keepalived目录下有down文件就虚拟IP地质转移</span><br><span class="line">   script &quot;[[ -f &#x2F;etc&#x2F;keepalived&#x2F;down ]] &amp;&amp; exit 1 || exit 0&quot;</span><br><span class="line">   interval 1                      # 检测间隔</span><br><span class="line">   weight -10                      # 降权，也就是减去优先级多少值</span><br><span class="line">   fall 2                          # 检测到两次错误才发生转移</span><br><span class="line">   rise 1                          # 至少正常1次才算正常</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;            # 定义的脚本，意思是Nginx进程是否在运行，如果没有就虚拟IP地址转移；</span><br><span class="line">        script &quot;killall -0 nginx &amp;&amp; exit 0 || exit 1&quot;</span><br><span class="line">        interval 2</span><br><span class="line">        weight -10</span><br><span class="line">        fall 2</span><br><span class="line">        rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.88</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        track_script &#123;               # 调用定义的脚本</span><br><span class="line">                chk_down</span><br><span class="line">                chk_nginx</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@host1 keepalived]#</span><br></pre></td></tr></table></figure>
<p><strong>主机host2上配置keepalived服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host2 keepalived]#cat keepalived.conf </span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host2</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_down &#123;</span><br><span class="line">   scrip &quot;[[ -f &#x2F;etc&#x2F;keepalived&#x2F;down ]] &amp;&amp; exit 1 || exit 0&quot;</span><br><span class="line">   interval 1</span><br><span class="line">   weight -10</span><br><span class="line">   fall 2</span><br><span class="line">   rise 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_sript chk_nginx &#123;</span><br><span class="line">   script &quot;killall -0 nginx&quot;</span><br><span class="line">   interval 2</span><br><span class="line">   weight -10</span><br><span class="line">   fall 2</span><br><span class="line">   rise 2</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP     &lt;-- 这里是BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 95</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.88</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;                # 调用定义的脚本</span><br><span class="line">        chk_nginx</span><br><span class="line">        chk_down</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在四台主机上启动各自的服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<p>#测试：</p>
<ul>
<li><p><strong>1. 关闭主机host1的Nginx：systemctl stop nginx</strong></p>
<ul>
<li>查看host2的keepalived状态和IP地址<br><img src="http://upload-images.jianshu.io/upload_images/6121564-14ccd9b191482cc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="host2"></li>
<li>客户端上测试是否能够访问后端Web服务<br><img src="http://upload-images.jianshu.io/upload_images/6121564-411329ab8314ce60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在客户端主机上"></li>
</ul>
</li>
<li><p><strong>2. 测试调用脚本：这里只检测一项脚本</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-65c8b9a8ca73f487.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试脚本，创建down文件和删除down文件，兼顾查看IP"></p>
</li>
</ul>
<h2 id><a href="#" class="headerlink" title></a><img src="http://upload-images.jianshu.io/upload_images/6121564-54b9ffe0e24e7890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注意降权和地址漂移"></h2>]]></content>
  </entry>
  <entry>
    <title>CentOS6系列系统启动流程故障表现形式以及排错修复</title>
    <url>/2020/02/17/Centos6%E7%B3%BB%E5%88%97%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E6%95%85%E9%9A%9C%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%8E%92%E9%94%99%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-6f248c411a5683bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<blockquote>
<p>本文大体顺序为：某故障—表现形式(图)—排错—修复</p>
</blockquote>
<p>##因MBR损坏导致系统故障无法重启</p>
<p>####重启表现形式:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-788dabeeca00dc97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>####排错：</p>
<p>如果重启系统后出现上图所示界面说明<strong>MBR</strong>损坏了。因为是MBR损坏的原因，操作系统重启时认为系统硬盘根本不具有可引导功能了，所以把硬盘忽略过去，直接进入第二个启动设备光盘。</p>
<a id="more"></a>
<p>####修复方法：</p>
<p><strong>进入救援模式 — <code>chroot  /mnt/sysimage/</code> — <code>grub-install</code> — <code>sync</code> — <code>exit</code> — <code>reboot</code></strong></p>
<blockquote>
<p>这里略过进入救援模式的步骤</p>
</blockquote>
<p><strong>切根：chroot  /mnt/sysimage/</strong><br>进入救援模式制后需要注意当前的根并不是我们系统里的根，是光盘自带的小Linux的根，而真正的根在进入救援模式的时候已经帮我们寻找到并把它挂载到了/mnt/sysimage上，可通过<strong><code>df</code></strong>命令查看</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0df237fa6403c895.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>所以进入救援模式的<strong><code>shell</code></strong>之后最好先进行切根操作</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-db9883f4676e3af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**`chroot  /mnt/sysiage`**"></p>
<p><strong>修复：用grub-install命令</strong><br>命令<strong><code>grub-install</code></strong>是修复<strong><code>grub</code></strong>的，它可以把系统启动流程中的<strong><code>stage1</code></strong>和<strong><code>stage1_5</code></strong>阶段安装到对应的磁盘上去，并把二阶段的相关文件复制到<strong><code>boot</code></strong>目录下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1dc04501ffb53623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修复完之后多同步几次再退出"></p>
<p><strong>同步数据：用sync命令</strong><br>sync命令是同步缓存数据的，因为我们向磁盘里写数据是先写进缓存里再读进磁盘里的。所以这时候不能急，多同步几下，让数据完全写进磁盘里在退出重启。请看上图；</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-74e2fa0e4c571a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="reboot"></p>
<p><strong>代码块:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash-4.1# chroot &#x2F;mnt&#x2F;sysimage   &lt;---- 切根</span><br><span class="line">sh-4.1# grub-install &#x2F;dev&#x2F;sda    &lt;---- 修复</span><br><span class="line">sh-4.1# sync                     &lt;---- 同步数据</span><br><span class="line">sh-4.1# sync</span><br><span class="line">sh-4.1# exit</span><br></pre></td></tr></table></figure>

<hr>
<p>##grub的stage1_5阶段出现故障无法重启<br>####重启表现形式：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-73f4b9994c67e818.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="**`stage1_5 阶段损坏重启表现形式`**"></p>
<p>####排错：<br>看到上图可以确定是stage1_5阶段损坏引起的故障，导致无法重启。如果一阶段没出问题，MBR没坏，系统会认为磁盘能启动，不会进入到光盘界面，只是后续起不来了，想进二阶段进不去了。</p>
<p>####修复方法：</p>
<blockquote>
<p>和修复stage1阶段出故障一样，特别注意重启表现形式的区别。所以下面我列出步骤和命令代码块</p>
</blockquote>
<p><strong>进入救援模式 — <code>chroot  /mnt/sysimage/</code> — <code>grub-install</code> — <code>sync</code> — <code>exit</code> — <code>reboot</code></strong></p>
<p><strong>代码块:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash-4.1# chroot &#x2F;mnt&#x2F;sysimage   &lt;---- 切根</span><br><span class="line">sh-4.1# grub-install &#x2F;dev&#x2F;sda    &lt;---- 修复</span><br><span class="line">sh-4.1# sync                     &lt;---- 同步数据</span><br><span class="line">sh-4.1# sync</span><br><span class="line">sh-4.1# exit</span><br></pre></td></tr></table></figure>
<hr>
<p>##grub 的2 阶段出故障导致无法启动</p>
<p>####重启表现形式：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-22424bd6325b4df3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2阶段出故障的重启表现形式"></p>
<p>####排错：<br>初始安装的时候/boot/grub/下的文件并不是放在该目录下的，而是放在扇区里，如果后期经过grub-install命令修复过故障，会把那些文件写在该目录下。所以再次出故障表现的形式也不一样，如上图所示；</p>
<p>####修复方法：<br>修复方法还是进入光盘引导的救援模式；与上述的故障修复一样。</p>
<p>####但是：</p>
<blockquote>
<p>如果你是因为误操作把整个<strong>grub</strong>目下的所有文件都删除了的话，上面的修复步骤还不能完全修复好，<strong>grub</strong>下的<strong>grub.conf</strong>文件可不是<strong>grub-install</strong>命令可以生成的！<strong>grub.conf</strong>文件是由我们安装系统的时候<strong>安装向导程序 anaconda</strong>生成的！！所以当我们完成上面的步骤<strong>reboot</strong>之后我们还需手动制作<strong>grub.conf</strong>文件！</p>
</blockquote>
<p><strong>显示界面：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-bfdc8a0594d11a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这就是重启后制作grub.conf文件的界面"></p>
<p><strong>制作grub.conf文件：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-5ea1f3abd375bc83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入图中红框里的三行内容boot回车重启"></p>
<p><strong>因为系统又一次去扫文件，我们需要再一次执行上面的操作才算完成</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-5c6439b9d80ea124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>##结语<br><strong>这</strong>里我只列出三种相似系统故障的表现形式和修复方法。</p>
<p><strong>有</strong>文件损坏、误操作等各种原因引起的系统故障导致无法重启，其表现形式都有所不同。我也不能在这么一篇简简单单的博文里全部列出来。当然我菜鸟级别的技术水平，也列不出所有来。所以这篇博文我称之为第一篇。后续还有更新更多的相关博文。我好你好大家好才是真的好…</p>
<p><strong>如</strong>果本文那里有误，我会非常愿意大家帮纠错。同时大家有其他更多的系统故障排错修复经验强烈要求分享给我吧，大牛们！！！</p>
]]></content>
  </entry>
  <entry>
    <title>keepalived概念</title>
    <url>/2020/02/17/keepalived%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>#vrrp协议简介：</p>
<blockquote>
<ul>
<li><strong>虚拟路由冗余协议(Virtual Router Redundancy Protocol，简称VRRP协议)</strong><ul>
<li><strong>VRRP是一种选择协议</strong>。它可以把一个虚拟路由器的责任动态分配到局域网上的 VRRP 路由器中的一台。控制虚拟路由器 IP 地址的 VRRP 路由器称为主路由器，它负责转发数据包到这些虚拟 IP 地址。  一旦主路由器不可用，这种选择过程就提供了动态的故障转移机制，这就允许虚拟路由器的 IP 地址可以作为终端主机的默认第一跳路由器。是一种LAN接入设备备份协议。一个局域网络内的所有主机都设置[缺省网关，这样主机发出的目的地址不在本网段的报文将被通过缺省网关发往三层交换机，从而实现了主机和外部网络的通信。</li>
<li><strong>VRRP是一种路由容错协议，也可以叫做备份路由协议</strong>。一个局域网络内的所有主机都设置缺省路由，当网内主机发出的目的地址不在本网段时，报文将被通过缺省路由发往外部路由器，从而实现了主机与外部网络的通信。当缺省路由器down掉（即端口关闭）之后，内部主机将无法与外部通信，如果路由器设置了VRRP时，那么这时，虚拟路由将启用备份路由器，从而实现全网通信。</li>
<li><strong>VRRP（Virtual Router Redundancy Protocol，虚拟路由冗余协议）是一种容错协议</strong>。通常，一个网络内的所有主机都设置一条[缺省路由]，这样，主机发出的目的地址不在本网段的报文将被通过缺省路由发往路由器RouterA，从而实现了主机与外部网络的通信。当路由器RouterA 坏掉时，本网段内所有以RouterA 为缺省路由下一跳的主机将断掉与外部的通信产生单点故障。VRRP 就是为解决上述问题而提出的，它为具有多播组播或广播能力的局域网（如：以太网）设计。</li>
</ul>
</li>
<li><a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E8%B7%AF%E7%94%B1%E5%99%A8%E5%86%97%E4%BD%99%E5%8D%8F%E8%AE%AE/2991482?fr=aladdin" target="_blank" rel="noopener">本段简介摘自百度百科vrrp协议</a></li>
</ul>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp协议：Virtual Redundant Routing Protocol</span><br><span class="line">      术语：</span><br><span class="line">		虚拟路由器：Virtual Router </span><br><span class="line">		虚拟路由器标识：VRID(0-255)</span><br><span class="line">		物理路由器：</span><br><span class="line">			master：主设备</span><br><span class="line">			backup：备用设备</span><br><span class="line">			priority：优先级</span><br><span class="line">		VIP：Virtual IP </span><br><span class="line">		VMAC：Virutal MAC (00-00-5e-00-01-VRID)</span><br><span class="line">			 GraciousARP</span><br><span class="line">				</span><br><span class="line">通告：心跳，优先级等；周期性；</span><br><span class="line">			</span><br><span class="line">        抢占式，非抢占式；</span><br><span class="line">			</span><br><span class="line">安全工作：</span><br><span class="line">		无认证</span><br><span class="line">		简单字符认证</span><br><span class="line">		MD5</span><br><span class="line">					</span><br><span class="line">工作模式：</span><br><span class="line">    主&#x2F;备：单虚拟路径器；</span><br><span class="line">    主&#x2F;主：主&#x2F;备（虚拟路径器1），备&#x2F;主（虚拟路径器2）</span><br></pre></td></tr></table></figure>

<p>#keepalived定义：</p>
<blockquote>
<ul>
<li><strong><code>keepalived</code>作为一款软件，能够在<code>Linux</code>主机之上，实现其<code>vrrp协议</code>的功能！设计目的是为了高可用<code>ipvs</code>服务的！</strong><ul>
<li>基于vrrp协议完成地址转移，或者说地址流动；</li>
<li>为集群内的所有节点生成ipvs规则（在配置文件中预先定义）；</li>
<li>为ipvs集群的各RS（Real Server）做健康状态检测；</li>
<li>基于脚本调用接口通过执行脚本，完成脚本中定义的功能，进而影响集群事物；</li>
</ul>
</li>
</ul>
</blockquote>
<p>#keepalived组件：</p>
<blockquote>
<ul>
<li><strong>核心组件：</strong><ul>
<li><strong>vrrp stack：</strong>vrrp协议的实现</li>
<li><strong>ipvs wrapper：</strong>为集群内所有节点生成ipvs规则等</li>
<li><strong>checkers：</strong>为ipvs几群的各RS做健康状态检测的组件；</li>
</ul>
</li>
<li><strong>其他组件：</strong><ul>
<li><strong>控制组件：</strong>配置文件分析器，用来实现配置文件的分析和加载</li>
<li><strong>IO复用器</strong></li>
<li><strong>内存管理组件：</strong>高效管理keepalived的高可用服务时的内存空间占用的</li>
</ul>
</li>
</ul>
</blockquote>
<p>#Linux CentOS系统keepalived 安装和配置文件结构</p>
<p><strong>高可用集群的配置前提：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HA Cluster的配置前提：</span><br><span class="line">	(1) 各节点时间必须同步；</span><br><span class="line">	        ntp, chrony</span><br><span class="line">	(2) 确保iptables及selinux不会成为阻碍；</span><br><span class="line">	(3) 各节点之间可通过主机名互相通信（对KA并非必须）；</span><br><span class="line">		    建议使用&#x2F;etc&#x2F;hosts文件实现； </span><br><span class="line">	(4) 确保各节点的用于集群服务的接口支持MULTICAST（多播）通信；</span><br><span class="line">		    D类：224-239；</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-033e74194e51b2af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>安装keepalived：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0e965e545455fe6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-cd80263c70616803.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="几个主要的文件"></p>
<p><strong>配置文件组成部分：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TOP HIERACHY   顶级结构</span><br><span class="line">      GLOBAL CONFIGURATION  全局配置段</span><br><span class="line">      VRRPD CONFIGURATION   vrrp配置段</span><br><span class="line">      LVS CONFIGURATION     LVS配置段</span><br><span class="line"></span><br><span class="line">GLOBAL CONFIGURATION  全局配置段</span><br><span class="line">      Global definitions</span><br><span class="line">      Static routes&#x2F;addresses   在全局配置中可以添加静态路由</span><br><span class="line"></span><br><span class="line">VRRPD CONFIGURATION  vrrp 配置段</span><br><span class="line">      VRRP synchronization group(s)  同步组</span><br><span class="line">      VRRP instance(s)  vrrp实例：一个vrrp实例就是一个vrrp虚拟路由器</span><br><span class="line"></span><br><span class="line">LVS CONFIGURATION  LVS配置段：keepalived的高可用的时候才有必要配置这段</span><br><span class="line">      Virtual server group(s)  虚拟服务器组</span><br><span class="line">      Virtual server(s)   虚拟服务器</span><br></pre></td></tr></table></figure>
<hr>
<p>####（—-未完待续 —- ）</p>
]]></content>
  </entry>
  <entry>
    <title>CentOS 6.9系统如何通过多网卡绑定一个IP地址提高网络连接可用性和冗错性？</title>
    <url>/2020/02/17/Centos6.9%E5%A4%9A%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A%E4%B8%80%E4%B8%AAIP/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-060367e692b06ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<h2 id="正如题说，首先我们要选择一门能够实现多网卡绑定一个IP地址的技术。显而易见就是企业级应用Bonding技术的Mode-1模式。那到底怎么做呢呢？还请往下看"><a href="#正如题说，首先我们要选择一门能够实现多网卡绑定一个IP地址的技术。显而易见就是企业级应用Bonding技术的Mode-1模式。那到底怎么做呢呢？还请往下看" class="headerlink" title="######正如题说，首先我们要选择一门能够实现多网卡绑定一个IP地址的技术。显而易见就是企业级应用Bonding技术的Mode  1模式。那到底怎么做呢呢？还请往下看~"></a>######正如题说，首先我们要选择一门能够实现多网卡绑定一个IP地址的技术。显而易见就是企业级应用<strong><code>Bonding</code></strong>技术的<strong><code>Mode  1</code></strong>模式。那到底怎么做呢呢？还请往下看~</h2><p>####第一：首先关闭<strong><code>NetworkManager</code></strong>服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# service NetworkManager stop</span><br></pre></td></tr></table></figure>
<hr>
<p>####第二：在<strong><code>/etc/sysconfig/network-scripts/</code></strong>目录下配置三个配置文件</p>
<blockquote>
<p>1.创建一个<strong><code>bond</code></strong>的新配置文件<br>2.修改要绑定的两个网卡的配置文件</p>
</blockquote>
<p>######新建<strong><code>bond</code></strong>文件并进行配置 :</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]# vim ifcfg-bond0    &lt;&#x3D;&#x3D;: 直接用vim编辑器创建，名字可以自定义，写配置文件的时候注意相同就行</span><br><span class="line">DEVICE&#x3D;bond0</span><br><span class="line">BOOTPROTO&#x3D;none</span><br><span class="line">IPADDR&#x3D;192.168.32.99</span><br><span class="line">PREFIX&#x3D;24</span><br><span class="line">BONDING_OPTS&#x3D;&quot;mode&#x3D;1 miimon&#x3D;100&quot;      &lt;&#x3D;&#x3D;: 注意，这一行最关键！&quot;mode&#x3D;1&quot;是bo工作模式；&quot;miimon&#x3D;100&quot;是监控间隔为100毫秒；</span><br><span class="line">[root@localhost network-scripts]#</span><br></pre></td></tr></table></figure>
<p>######如图 :</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b7e3d190002327a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>######修改要绑定同一个IP地址的两个网卡配置文件 :</p>
<p><strong>eth0 :</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]# vim ifcfg-eth0</span><br><span class="line">DEVICE&#x3D;&quot;eth0&quot;</span><br><span class="line">MASTER&#x3D;bond0              &lt;&#x3D;&#x3D;: 属于bond0            </span><br><span class="line">SLAVE&#x3D;yes                 &lt;&#x3D;&#x3D;: 确认从属关系 </span><br><span class="line">IPADDR&#x3D;192.168.32.66</span><br><span class="line">PREFIX&#x3D;24</span><br><span class="line">GATEWAY&#x3D;192.168.32.1</span><br><span class="line">BOOTPROTO&#x3D;&quot;none&quot;</span><br><span class="line">HWADDR&#x3D;&quot;00:0C:29:5A:C5:00&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">UUID&#x3D;&quot;6da43880-cb88-4b6e-992f-d4c228b03cc9&quot;</span><br></pre></td></tr></table></figure>
<p>######如图 :</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-15b7f99baf00219d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>eth1 :</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]# vim ifcfg-eth1</span><br><span class="line">DEVICE&#x3D;eth1</span><br><span class="line">MASTER&#x3D;bond0</span><br><span class="line">SLAVE&#x3D;yes</span><br><span class="line">IPADDR&#x3D;192.168.32.88</span><br><span class="line">PREFIX&#x3D;24</span><br><span class="line">GATEWAY&#x3D;192.168.32.1</span><br><span class="line">MACADDR&#x3D;00:0C:29:5A:C5:66  </span><br><span class="line">BOOTPROTO&#x3D;none</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">DNS1&#x3D;114.114.114.114</span><br><span class="line">DNS2&#x3D;8.8.8.8</span><br><span class="line">DNS3&#x3D;8.8.4.4</span><br></pre></td></tr></table></figure>

<p>######如图 :</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e8931f64bca25dd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>####第三：重启网络服务<code>service network restart</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]# service network restart</span><br><span class="line">Shutting down interface bond0:                             [  OK  ]</span><br><span class="line">Shutting down loopback interface:                          [  OK  ]</span><br><span class="line">Bringing up loopback interface:                            [  OK  ]</span><br><span class="line">Bringing up interface bond0:  Determining if ip address 192.168.32.99 is already in use f</span><br><span class="line">or device bond0...                                                           [  OK  ]</span><br></pre></td></tr></table></figure>
<hr>
<p>####第四：查看配置结果</p>
<blockquote>
<p>这里不做详细的测试，看下IP地址和bond0工作状态</p>
</blockquote>
<p>######查看IP地址：</p>
<blockquote>
<p>这里注意查看网卡<strong>eth0</strong>和网卡<strong>eth1</strong>的<strong>mac</strong>地址，它们是相同的哦</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ifconfig</span><br><span class="line">bond0     Link encap:Ethernet  HWaddr 00:0C:29:5A:C5:00                       &lt;&#x3D;&#x3D;: MAC地址相同</span><br><span class="line">          inet addr:192.168.32.99  Bcast:192.168.32.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe5a:c500&#x2F;64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MASTER MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:685 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:440 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:62692 (61.2 KiB)  TX bytes:44137 (43.1 KiB)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:5A:C5:00                       &lt;&#x3D;&#x3D;: MAC地址相同 </span><br><span class="line">          UP BROADCAST RUNNING SLAVE MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:612 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:416 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:54584 (53.3 KiB)  TX bytes:42563 (41.5 KiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:5A:C5:00                       &lt;&#x3D;&#x3D;: MAC地址相同 </span><br><span class="line">          UP BROADCAST RUNNING SLAVE MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:74 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:24 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:8168 (7.9 KiB)  TX bytes:1574 (1.5 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1&#x2F;128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:12 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:1040 (1.0 KiB)  TX bytes:1040 (1.0 KiB)</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>

<p>######<strong>查</strong>看<strong><code>bond0</code></strong>状态:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat &#x2F;proc&#x2F;net&#x2F;bonding&#x2F;bond0 </span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)       &lt;&#x3D;&#x3D;: 工作模式</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: eth0                        &lt;&#x3D;&#x3D;: 当前工作的网卡</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth0</span><br><span class="line">MII Status: up                                      &lt;&#x3D;&#x3D;: eth0状态</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:5a:c5:00</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth1</span><br><span class="line">MII Status: up                                     &lt;&#x3D;&#x3D;: eth1状态</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:5a:c5:66</span><br><span class="line">Slave queue ID: 0</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>
<hr>
<p>####结语<br><strong>bonding</strong>就是 将多块网卡绑定同一IP 地址对外提供服务，可以实现高可用或者负载均衡。当然，直接给两块网卡设置同一IP 地址是不可能的。先通过配置bonding ，虚拟一块网卡对外提供连接，然后修改物理网卡的配置文件，设置成和虚拟网卡从属关系，这样的话物理网卡的MAC地址和虚拟网卡的MAC 地址呈现为相同的地址。</p>
<p><strong>当然</strong>有很多种工作模式，不同的功能可以选择~这里就不细说了</p>
]]></content>
  </entry>
  <entry>
    <title>keepalived之vrrp实现地址转移</title>
    <url>/2020/02/17/keepalived%E4%B9%8Bvrrp%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9D%80%E8%BD%AC%E7%A7%BB/</url>
    <content><![CDATA[<p><strong>节点一上的配置：</strong><br>切到配置文件的目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 ~]#cd &#x2F;etc&#x2F;keepalived</span><br><span class="line">[root@host1 keepalived]#cp keepalived.conf&#123;,.bak&#125;  &lt;--备份</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-75da397fc34691f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件</span><br><span class="line">vim keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;         &lt;--真正能接收邮件的邮箱地址</span><br><span class="line">		ngt@mgl.com  		    &lt;--邮件地址</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com    &lt;--能发邮件的邮箱地址</span><br><span class="line">   smtp_server 127.0.0.1        &lt;--邮件服务器</span><br><span class="line">   smtp_connect_timeout 30      &lt;--smtp链接超时时间，超了就不发了</span><br><span class="line">   router_id   host1            &lt;--五里路由器的服务器的ID,直接写上主机名更好</span><br><span class="line">   vrrp_mcast_group4 224.89.51.18             &lt;--ipv4多播地址（默认是224.0.0.18）</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;        &lt;--真正的虚拟路由器的配置</span><br><span class="line">    state MASTER            &lt;--或状态BACKUP</span><br><span class="line">    interface ens33         &lt;--配置的接口网卡</span><br><span class="line">    virtual_router_id 89    &lt;-- 虚拟路由ID0-255</span><br><span class="line">    priority 100        &lt;--当前虚拟路由器之间的优先级</span><br><span class="line">    advert_int 1        &lt;--每个多长时间传递优先级</span><br><span class="line">    authentication &#123;    &lt;--认证</span><br><span class="line">        auth_type PASS  &lt;--认证方法，简单字符串密码认证，不能超过8位</span><br><span class="line">        auth_pass 12345678   &lt;--认证的值，也就是密码(可以用openssl rand -base64 8 命令生成) </span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;    &lt;--虚拟地址</span><br><span class="line">        192.168.10.66</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-a846633c0ab46c21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vim /keepalived.conf"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#vim keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     ngt@mgl.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from grh_ngt@mgl.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id host1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 89</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass nQyVIaY1</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.66</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&quot;keepalived.conf&quot; 151L, 3560C written        </span><br><span class="line">                  </span><br><span class="line">[root@host1 keepalived]#scp keepalived.conf host2:&#x2F;etc&#x2F;keepalived&#x2F;    &lt;--发送到节点2 上</span><br><span class="line">The authenticity of host &#39;host2 (192.168.10.12)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is ed:c4:6c:43:77:9b:ab:a4:d9:64:fb:37:4c:cf:0f:7f.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;host2&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">root@host2&#39;s password: </span><br><span class="line">keepalived.conf                                100% 3560     3.5KB&#x2F;s   00:00    </span><br><span class="line">[root@host1 keepalived]#</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-7951b96bf51344a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>节点二上的配置：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-2a16c1f5030abf8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点二的keepalived.conf配置"></p>
<p><strong>两个节点上分别启动服务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host1 keepalived]#systemctl start keepalived.service</span><br><span class="line">[root@host2 keepalived]#systemctl start keepalived.service</span><br></pre></td></tr></table></figure>
<p><strong>测试：</strong></p>
<ul>
<li><strong>首先分别在两个节点上查看状态是否正常，尤其注意节点一的状态；</strong></li>
</ul>
<p><strong>节点一：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-4234d6db3790d780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点1上，也是主节点"><br><strong>节点二：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-3061ff70caf5bffe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点二也正常"></p>
<ul>
<li><strong>把节点一的服务停掉，再在节点二上查看状态以及IP地址，查看是否转移；</strong></li>
</ul>
<p><strong>节点一：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-113dac983b82bdd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关掉服务之后，作为MASTER的节点一失去了虚拟IP地址"></p>
<p><strong>节点二：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-4c1ab87979dd3b60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="虚拟IP地址已经成功转移到节点二上了"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-72380f6a968509d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看节点二的IP地址能看到虚拟IP地址已经成功转移过来了"></p>
<ul>
<li><strong>再把节点一的服务启动起来，并查看状态和IP；</strong></li>
</ul>
<p><strong>节点一：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-744065f27140fc74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点一"></p>
<p><strong>节点二：</strong><br><img src="http://upload-images.jianshu.io/upload_images/6121564-2247e46a2d6335c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点二"></p>
<hr>
<p>至此，关于keepalived的vrrp实现地址转移已经结束了；</p>
]]></content>
  </entry>
  <entry>
    <title>编译安装bind服务配置一台DNS服务器</title>
    <url>/2020/02/17/deploy-bind-service-for-dns-server/</url>
    <content><![CDATA[<p>###安装DNS服务器软件bind</p>
<blockquote>
<p><strong><code>bind</code>是<code>DNS</code>服务软件包，安装部署配置一台<code>DNS</code>服务器可以直接通过<code>yum</code>来安装也可以选择编译安装，接下来我们选后者编译安装</strong></p>
</blockquote>
<a id="more"></a>
<p>#####准备工作：<br><strong>1.去官网下载bind包<a href="http://www.isc.org" target="_blank" rel="noopener">www.isc.org</a></strong><br><strong>2.把下载好的包rz上传到Linux</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root ~]# rz  &lt;--rz是把windows桌面上的文件上传到Linux，反之sz filename(文件名)</span><br></pre></td></tr></table></figure>
<p><strong>3.安装开发者包组：<code>[root@root ~]# yum -y groupinstall &quot;Development tools&quot;</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root ~]# yum -y groupinstall &quot;Development tools&quot;  &lt;-- ‘Development Tools’是开发者包租</span><br></pre></td></tr></table></figure>
<p><strong>4.解压缩包：<code>[root@root ~]# tar xvf bind-9.10.5-P3.tar.gz</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root ~]#   tar xvf bind-9.10.5-P3.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>5.创建对应的系统账号：<code>[root@root ~]# useradd -r -d /var/named -s /sbin/nologin -u 53 named</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root ~]# useradd -r -d &#x2F;var&#x2F;named -s &#x2F;sbin&#x2F;nologin -u 53 named</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0c9f73dbd52c0d0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>6.因为是用<code>useradd</code>创建的，系统账号家目录不会自动生成，并设置好所有者所属组；</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root ~]# mkdir &#x2F;var&#x2F;named &lt;-- 注意，此时创建的目录所属组要修改成named,不然访问不了的</span><br><span class="line">[root@root ~]# chgrp named &#x2F;var&#x2F;named&#x2F; &lt;--‘chgrp’是修改所属组的命令</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/6121564-73dbcc3e3f3e992a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>7.创建一个安装目录，以后再该目录下安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root ~]# mkdir &#x2F;app&#x2F;bind9</span><br></pre></td></tr></table></figure>
<hr>
<p>#####编译安装bind</p>
<blockquote>
<p><strong><code>编译安装综合来讲就三大步，在解压包后生成的目录下分别执行三个命令:</code></strong><br><strong><code>注意：编译安装时必须在解压后生成的目录下</code></strong><br><strong><code>[root@root ~]#cd bind-9.10.5-P3</code></strong><br><strong><code>（1）configure：    &lt;--这一步一般用来生成 Makefile，为下一步的编译做准备！你可以根据生产环境去选择性的通过在 configure 后加上参数来对安装进行控制，比如指定安装目录等等；这个步骤会出现 error ，把相应的包用yum安装之后再执行一次；</code></strong><br><strong><code>[root@root bind-9.10.5-P3]# ./configure</code></strong><br><strong><code>（2）make：    &lt;--进行编译，执行Makefile文件里的指令，make的基本用处是自动根据makefile里的指令来编译源文件</code></strong><br><strong><code>[root@root bind-9.10.5-P3]# make</code></strong><br><strong><code>（3）make install：    &lt;--将 make 生成的文件安装到系统目录中</code></strong><br><strong><code>[root@root bind-9.10.5-P3]# make install</code></strong></p>
</blockquote>
<p><strong>1.执行configure，并指定安装路径为</strong><code>/app/bind9</code><strong>，并禁用openssl；</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root bind-9.10.5-P3]#.&#x2F;configure --prefix&#x3D;&#x2F;app&#x2F;bind9 --without-openssl</span><br><span class="line">                                       安装目录为&#x2F;app&#x2F;bind9   禁用openssl</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-69a15c8154e29577.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>2.执行make和make install</strong></p>
<blockquote>
<p>这两个可以一条命令执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root bind-9.10.5-P3]#make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<hr>
<p>###简单部署配置DNS服务器</p>
<blockquote>
<p>修改编辑相关变量和配置文件以及测试</p>
</blockquote>
<p><strong>1.把<code>/app/bind9/sbin</code>和<code>/app/bind9/bin</code>路径加到$PATH变量里面。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-5ec11034f7bff767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用vim编辑器在/etc/profile.d目录下创建一个bind9.sh文件"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-48b80424e5a4db20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bind9.sh文件内容"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-addb4029b1ff0d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bind9.sh创建完成之后需要执行&quot;. /etc/profile.d/bind9.sh&quot;命令让其生效并&quot;echo $PATH&quot;查看是否添加成功"></p>
<p><strong>2.在安装路径的</strong><code>etc</code><strong>下创建配置文件配置DNS</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-93749112d7099c3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="/app/bind9/etc目录下创建named.conf，指定数据文件保存目录/var/named和根文件类型以及文件名root.ca"></p>
<p><strong>3.切到<code>/var/named</code>目录去抓13个根服务器重定向到我们在配置文件里指定的路径下的<code>root.ca</code>文件里</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root named]#cd &#x2F;var&#x2F;named</span><br><span class="line">[root@root named]#dig -t NS . @172.16.0.1 &gt; root.ca</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1d8b06fe6d5fac0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>Ps：为了满足好奇心还是用代码块的方式看一下神奇的13个根服务器到底长啥样…</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root named]#cat root.ca </span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.5-P3 &lt;&lt;&gt;&gt; -t NS . @172.16.0.1</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20859</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 13, AUTHORITY: 0, ADDITIONAL: 27</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;.				IN	NS</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">.			386996	IN	NS	k.root-servers.net.</span><br><span class="line">.			386996	IN	NS	c.root-servers.net.</span><br><span class="line">.			386996	IN	NS	f.root-servers.net.</span><br><span class="line">.			386996	IN	NS	e.root-servers.net.</span><br><span class="line">.			386996	IN	NS	i.root-servers.net.</span><br><span class="line">.			386996	IN	NS	h.root-servers.net.</span><br><span class="line">.			386996	IN	NS	j.root-servers.net.</span><br><span class="line">.			386996	IN	NS	l.root-servers.net.</span><br><span class="line">.			386996	IN	NS	a.root-servers.net.</span><br><span class="line">.			386996	IN	NS	g.root-servers.net.</span><br><span class="line">.			386996	IN	NS	d.root-servers.net.</span><br><span class="line">.			386996	IN	NS	b.root-servers.net.</span><br><span class="line">.			386996	IN	NS	m.root-servers.net.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">e.root-servers.net.	74925	IN	A	192.203.230.10</span><br><span class="line">e.root-servers.net.	74925	IN	AAAA	2001:500:a8::e</span><br><span class="line">d.root-servers.net.	41600	IN	A	199.7.91.13</span><br><span class="line">d.root-servers.net.	41600	IN	AAAA	2001:500:2d::d</span><br><span class="line">h.root-servers.net.	41600	IN	A	198.97.190.53</span><br><span class="line">h.root-servers.net.	41600	IN	AAAA	2001:500:1::53</span><br><span class="line">j.root-servers.net.	41600	IN	A	192.58.128.30</span><br><span class="line">j.root-servers.net.	208801	IN	AAAA	2001:503:c27::2:30</span><br><span class="line">g.root-servers.net.	41600	IN	A	192.112.36.4</span><br><span class="line">g.root-servers.net.	74925	IN	AAAA	2001:500:12::d0d</span><br><span class="line">k.root-servers.net.	41600	IN	A	193.0.14.129</span><br><span class="line">k.root-servers.net.	41600	IN	AAAA	2001:7fd::1</span><br><span class="line">a.root-servers.net.	74925	IN	A	198.41.0.4</span><br><span class="line">a.root-servers.net.	208801	IN	AAAA	2001:503:ba3e::2:30</span><br><span class="line">i.root-servers.net.	41600	IN	A	192.36.148.17</span><br><span class="line">i.root-servers.net.	74925	IN	AAAA	2001:7fe::53</span><br><span class="line">c.root-servers.net.	74925	IN	A	192.33.4.12</span><br><span class="line">c.root-servers.net.	41600	IN	AAAA	2001:500:2::c</span><br><span class="line">f.root-servers.net.	41600	IN	A	192.5.5.241</span><br><span class="line">f.root-servers.net.	41600	IN	AAAA	2001:500:2f::f</span><br><span class="line">m.root-servers.net.	208801	IN	A	202.12.27.33</span><br><span class="line">m.root-servers.net.	208801	IN	AAAA	2001:dc3::35</span><br><span class="line">l.root-servers.net.	54228	IN	A	199.7.83.42</span><br><span class="line">l.root-servers.net.	54228	IN	AAAA	2001:500:9f::42</span><br><span class="line">b.root-servers.net.	41600	IN	A	192.228.79.201</span><br><span class="line">b.root-servers.net.	41600	IN	AAAA	2001:500:200::b</span><br><span class="line"></span><br><span class="line">;; Query time: 4 msec</span><br><span class="line">;; SERVER: 172.16.0.1#53(172.16.0.1)</span><br><span class="line">;; WHEN: Thu Jul 27 15:00:49 CST 2017</span><br><span class="line">;; MSG SIZE  rcvd: 811</span><br><span class="line"></span><br><span class="line">[root@root named]#</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的环节注意给named读权限!!!</p>
</blockquote>
<p><strong>4.把域建起来，比如：<code>gaorihan.com</code></strong><br><strong>4.1</strong> 编辑配置文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-1319be7a40d4b660.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gaorihan.com是域名，gaorihan.com.zone是/var/named下的数据库文件名"></p>
<p><strong>4.2</strong> 在<strong><code>/var/named</code></strong>路径下创建域的文件并检查语法</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-773d06df26a2c7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SOA记录、NS记录是必须写的记录，而且在最上面。A记录也是必须有的"><br><strong>4.3</strong> 把man帮助路径添加到系统man帮助的配置文件<strong><code>/etc/man.config</code></strong>里</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c044fffbfff91a47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><strong>5.启动服务并测试</strong><br>1).本终端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@root named]#named -f -g -d 3 -u named</span><br></pre></td></tr></table></figure>
<p>2).另一个终端执行<strong><code>ss -tnul</code></strong>命令查看端口连接情况。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-d512bd5c30d0fc9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DNS的TCP和UDP都是53端口"></p>
<p>3)再别的主机上dig一下，看看能不能<strong><code>gaorihan.com</code></strong>域名解析成我们在记录里加进去的IP地址<strong><code>6.6.6.6</code></strong></p>
<pre><code>[root@root ~]#dig www.gaorihan.com @172.16.252.217

; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.47.rc1.el6 &lt;&lt;&gt;&gt; www.gaorihan.com @172.16.2
52.217;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 34721
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1

;; QUESTION SECTION:
;www.gaorihan.com.        IN    A

;; ANSWER SECTION:
www.gaorihan.com.    86400    IN    A    6.6.6.6   &lt;&lt;--这不就是我们设置的吗

;; AUTHORITY SECTION:
gaorihan.com.        86400    IN    NS    dns1.gaorihan.com.

;; ADDITIONAL SECTION:
dns1.gaorihan.com.    86400    IN    A    172.16.252.217

;; Query time: 6 msec
;; SERVER: 172.16.252.217#53(172.16.252.217)
;; WHEN: Thu Jul 27 17:27:55 2017
;; MSG SIZE  rcvd: 85

[root@root ~]#dig www.gaorihan.com @172.16.252.217</code></pre><hr>
<p>###结语<br>DNS服务器的主要作用就是将主机名解析成IP地址的过程，解决域名到IP地址的转换。目前互联网这么发达，几乎所有的服务器都在向外提供各种服务，DNS记录也会越来越多，掌握部署配置DNS服务器是必备技能。</p>
]]></content>
  </entry>
  <entry>
    <title>Ansible的常用模块</title>
    <url>/2020/02/17/Ansible%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-7e2ebaba8747a0f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#前言</p>
<blockquote>
<ul>
<li><strong>基本概念：<br>Ansible是自动化运维工具，基于Python开发。基于主机清单/etc/ansible/hosts文件里定义的主机和主机组，可实现远程管理目标主机的功能。实现了批量系统配置、批量程序部署、批量运行命令等功能。</strong></li>
<li><strong>简单使用格式：<br>ansible  主机（主机清单里定义的主机或主机组） -m  模块  -a  “ 模块参数 “</strong></li>
<li><strong>获取模块列表：<br>ansible-doc   -l</strong></li>
<li><strong>查看模块帮助：<br>ansible-doc -s Module_Name(模块名)</strong></li>
</ul>
</blockquote>
<a id="more"></a>
<p>#Ansible的常用模块</p>
<ul>
<li><strong>templates模块：<br>直接把一个文件基于模板处理完以后保存于远程服务器之上；</strong></li>
<li><strong>shell模块：<br>在远程主机上shell进程下运行命令，支持shell特性，如管道等；</strong></li>
<li><strong>copy模块：<br>复制文件的模块;</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) src&#x3D;源地址，源目录</span><br><span class="line">   （如果带&#x2F;的话目录本身不复制，只把目录中的内容复制过去，如果最后不带&#x2F;的话会复制目录本身以及内容可递归）  </span><br><span class="line">    dest&#x3D;目标地址、目标目录</span><br><span class="line">(2) content&#x3D;（&#39;自己生成内容&#39;）  </span><br><span class="line">    dest&#x3D;（把自己生成的内容发到目标地址）</span><br><span class="line">    owner（复制过去之后的属主）, </span><br><span class="line">    group（复制过去之后的属组）, </span><br><span class="line">    mode（复制过去之后的权限）</span><br><span class="line">    remote_src (从远程复制到远程)</span><br></pre></td></tr></table></figure></li>
<li><strong>file模块：<br>创建文件的模块，其更重要的是设定文件属性的；</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 创建链接文件：*path&#x3D;  src&#x3D;  state&#x3D;link</span><br><span class="line">(2) 修改属性：path&#x3D;  owner&#x3D; mode&#x3D; group&#x3D; </span><br><span class="line">(3) 创建目录：path&#x3D;  state&#x3D;directory</span><br></pre></td></tr></table></figure></li>
<li><strong>yum模块：<br>安装程序包;</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;：程序包名称，可以带版本号</span><br><span class="line">state&#x3D; 安装还是卸载</span><br><span class="line">       present, latest , installed都表示安装</span><br><span class="line">       absent , removed 都表示卸载</span><br></pre></td></tr></table></figure></li>
<li><strong>service模块：<br>管理服务,比如启动停止重启之类的</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;服务名称</span><br><span class="line">state&#x3D;</span><br><span class="line">	started 启动服务</span><br><span class="line">	stopped 停止服务</span><br><span class="line">	restarted 重启服务</span><br><span class="line">	enabled 开机启用</span><br></pre></td></tr></table></figure></li>
<li><strong>user模块：<br>管理用户账号;</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*name&#x3D; 用户名</span><br><span class="line">system&#x3D; 是否系统用户</span><br><span class="line">uid&#x3D; 用户账号</span><br><span class="line">shell&#x3D; shell类型</span><br><span class="line">group&#x3D; 属组</span><br><span class="line">groups&#x3D; 附属组</span><br><span class="line">home&#x3D; 家目录</span><br></pre></td></tr></table></figure></li>
<li><strong>group模块：<br>在指定目标主机上创建组的;</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;组名</span><br><span class="line">gid&#x3D;组ID</span><br><span class="line">state</span><br></pre></td></tr></table></figure>
#结语<blockquote>
<p><strong>我只是列出了比较常用的几个模块来简单说明，也是自我学习用的；可以通过 <code>ansible-doc -l</code>列出所有模块，并通过<code>ansible-doc -s Module_Name(模块名)</code>获取帮助；</strong></p>
</blockquote>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ansible实现Nginx负载均衡客户请求至后端Tomcat服务器集群</title>
    <url>/2020/02/17/Ansible%E5%AE%9E%E7%8E%B0Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%82%E8%87%B3%E5%90%8E%E7%AB%AFTomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-a956d84118c630f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#搭建环境</p>
<ul>
<li><strong>安装Ansible</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ansible</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><strong>配置主机清单</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ansible&#x2F;hosts</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/6121564-25a2c8f5f2a7e2e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定义主机清单"></li>
<li><strong>检查主机清单是否添加成功</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Client ansible]#ansible all --list-hosts</span><br><span class="line">  hosts (3):</span><br><span class="line">    host1.centos7</span><br><span class="line">    host2.centos7</span><br><span class="line">    host3.centos7</span><br><span class="line">[root@Client ansible]#ansible lb --list-hosts</span><br><span class="line">  hosts (1):</span><br><span class="line">    host1.centos7</span><br><span class="line">[root@Client ansible]#ansible tc --list-hosts</span><br><span class="line">  hosts (2):</span><br><span class="line">    host2.centos7</span><br><span class="line">    host3.centos7</span><br><span class="line">[root@Client ansible]#</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-077742825792c97e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>基于ssh做无密钥认证</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Client ansible]#ssh-keygen -t rsa -P &#39;&#39;</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa): </span><br><span class="line">Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">02:6e:ab:d7:9a:35:54:25:7b:e6:2d:f7:c8:d8:aa:c1 root@Client.centos7</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|        . .      |</span><br><span class="line">|         +       |</span><br><span class="line">|    .   o o      |</span><br><span class="line">|   . . . + .     |</span><br><span class="line">|    o o S o o    |</span><br><span class="line">|   . o o   * o   |</span><br><span class="line">|    ..o E . + .  |</span><br><span class="line">|   ..o.. . .     |</span><br><span class="line">|  ..o.  ...      |</span><br><span class="line">+-----------------+</span><br><span class="line">[root@Client ansible]#ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host1</span><br><span class="line">The authenticity of host &#39;host1 (192.168.10.11)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is 9a:7d:a7:45:06:e0:7f:f2:d5:9c:35:05:8c:c2:f7:e9.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: attempting to log in with the new key(s), </span><br><span class="line">to filter out any that are already installed</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now </span><br><span class="line">it is to install the new keys</span><br><span class="line">root@host1&#39;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#39;root@host1&#39;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@Client ansible]#ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host2</span><br><span class="line">...</span><br><span class="line">[root@Client ansible]#ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub root@host3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-2693b94f415bb935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>测试 ssh 链接</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-bd2d7caaea3336fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>执行简单的ansible命令测试能否管控远程主机</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Client ansible]#ansible all -m shell -a &quot;ifconfig ens33&quot;</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/6121564-1a6de710bc5c4216.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li>
<li><strong>同步时间</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-b350d686f891a3a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>#创建角色</p>
<blockquote>
<p>需要创建三个角色分别为<strong>nginx</strong> 和 <strong>tomcat</strong> 以及 <strong>jdk</strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-f66792d4aa6c971e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-72da45cf9445382d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-50e0625444829fb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>编写playbook剧本nt.yml :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c216ea9bc019c38e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>编写nginx角色的tasks :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-bea7c57d5dce0158.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>编写nginx角色的配置文件 :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-cc261ca1877b0273.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>编写nginx角色的handlers :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-e4c5606d7ad327e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>测试一下nginx角色能否成执行：</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-913e8f63a75ab49f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>在lb主机上查看进程和端口是否存在：</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-54cc0e326a951da2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<ul>
<li><strong>编辑tomcat角色的tasks :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-bd7e53d3cf06dc60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<ul>
<li><strong>编写jdk角色的tasks :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-53ef3df054510b14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>编写jdk角色的files/java.sh :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-ef1ffffeaf68facd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<ul>
<li><strong>编写jdk角色的vars/main.yml :</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-de27b18802ced97c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<hr>
<p>#完善我们的剧本nt.yml<br><img src="http://upload-images.jianshu.io/upload_images/6121564-adaf8c77f185138f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>#执行我们的剧本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Client ansible]#ansible-playbook nt.yml   </span><br><span class="line"></span><br><span class="line">PLAY [lb] **********************************************************************</span><br><span class="line"></span><br><span class="line">TASK [setup] *******************************************************************</span><br><span class="line">ok: [host1.centos7]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install nginx] ***************************************************</span><br><span class="line">ok: [host1.centos7]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install conf] ****************************************************</span><br><span class="line">ok: [host1.centos7]</span><br><span class="line"></span><br><span class="line">TASK [nginx : start nginx] *****************************************************</span><br><span class="line">ok: [host1.centos7]</span><br><span class="line"></span><br><span class="line">PLAY [tc] **********************************************************************</span><br><span class="line"></span><br><span class="line">TASK [setup] *******************************************************************</span><br><span class="line">ok: [host3.centos7]</span><br><span class="line">ok: [host2.centos7]</span><br><span class="line"></span><br><span class="line">TASK [jdk : install openjdk] ***************************************************</span><br><span class="line">changed: [host2.centos7]</span><br><span class="line">changed: [host3.centos7]</span><br><span class="line"></span><br><span class="line">TASK [jdk : install evn file] **************************************************</span><br><span class="line">changed: [host3.centos7]</span><br><span class="line">changed: [host2.centos7]</span><br><span class="line"></span><br><span class="line">TASK [tomcat : install package] ************************************************</span><br><span class="line">changed: [host3.centos7] &#x3D;&gt; (item&#x3D;[u&#39;tomcat&#39;, u&#39;tomcat-admin-webapps&#39;, u&#39;tomcat-webapps&#39;, u&#39;tomcat-docs-webapp&#39;])</span><br><span class="line">changed: [host2.centos7] &#x3D;&gt; (item&#x3D;[u&#39;tomcat&#39;, u&#39;tomcat-admin-webapps&#39;, u&#39;tomcat-webapps&#39;, u&#39;tomcat-docs-webapp&#39;])</span><br><span class="line"></span><br><span class="line">TASK [tomcat : start tomcat] ***************************************************</span><br><span class="line">changed: [host3.centos7]</span><br><span class="line">changed: [host2.centos7]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************</span><br><span class="line">host1.centos7              : ok&#x3D;4    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0   </span><br><span class="line">host2.centos7              : ok&#x3D;5    changed&#x3D;4    unreachable&#x3D;0    failed&#x3D;0   </span><br><span class="line">host3.centos7              : ok&#x3D;5    changed&#x3D;4    unreachable&#x3D;0    failed&#x3D;0   </span><br><span class="line"></span><br><span class="line">[root@Client ansible]#</span><br></pre></td></tr></table></figure>
<p>#最终测试</p>
<blockquote>
<p><strong>在浏览器里输入<a href="http://www.grh.io" target="_blank" rel="noopener">www.grh.io</a></strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-a98badd327a11b34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
]]></content>
  </entry>
  <entry>
    <title>centos7修改主机名</title>
    <url>/2020/02/14/centos7%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl --static set-hostname host4.centos7</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">root@host1 ~]#vim &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 host1.centos7</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure>
<p>hostnamectl –static set-hostname host1.centos7</p>
]]></content>
  </entry>
  <entry>
    <title>Windows上设置共享文件</title>
    <url>/2020/02/14/Windows%E4%B8%8A%E8%AE%BE%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-5b01a09c62b87a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="要共享的文件上点击鼠标右键"><br>####右击选属性</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-61120349fabfc8e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>####点击共享里的高级共享</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-c2a88a5d6f907790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>####设置可读可写</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-50da9a6f112b28dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
]]></content>
  </entry>
  <entry>
    <title>CentOS设置某服务开机启用或开机禁用</title>
    <url>/2020/02/14/CentOS%E8%AE%BE%E7%BD%AE%E6%9F%90%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%9C%BA%E5%90%AF%E7%94%A8%E6%88%96%E5%BC%80%E6%9C%BA%E7%A6%81%E7%94%A8/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-0a91131b635b58e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CentOS6.x开机禁用并关闭防火墙服务.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-215c618f189fa5e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CentOS7.x开机禁用并关闭防火墙服务.png"></p>
]]></content>
  </entry>
  <entry>
    <title>查看隐藏文件的几种方法</title>
    <url>/2020/02/14/%E6%9F%A5%E7%9C%8B%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/6121564-a03af773dc67fdff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>####Linux查看目录下隐藏文件的四种方法</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-69e8244b32c2f8ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="四种查看隐藏文件的命令"></p>
<p>####代码表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#ls</span><br><span class="line">anaconda-ks.cfg  Downloads      httpd-2.4.25.tar.bz2  Pictures   vimrc</span><br><span class="line">bin              etc2017-06-06  initial-setup-ks.cfg  Public     Word 2007.lnk</span><br><span class="line">Desktop          f1             Music                 Templates</span><br><span class="line">Documents        httpd-2.4.25   partfile              Videos</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#ls -aI &quot;[^.]*&quot;   </span><br><span class="line">.              .bash_logout   .cache   .dbus          .lesshst  .tcshrc</span><br><span class="line">..             .bash_profile  .config  .esd_auth      .local    .viminfo</span><br><span class="line">.bash_history  .bashrc        .cshrc   .ICEauthority  .ssh      .vimrc</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#ls -a --ignore&#x3D;[^.]*</span><br><span class="line">.              .bash_logout   .cache   .dbus          .lesshst  .tcshrc</span><br><span class="line">..             .bash_profile  .config  .esd_auth      .local    .viminfo</span><br><span class="line">.bash_history  .bashrc        .cshrc   .ICEauthority  .ssh      .vimrc</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#ls -d .*</span><br><span class="line">.              .bash_logout   .cache   .dbus          .lesshst  .tcshrc</span><br><span class="line">..             .bash_profile  .config  .esd_auth      .local    .viminfo</span><br><span class="line">.bash_history  .bashrc        .cshrc   .ICEauthority  .ssh      .vimrc</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#</span><br><span class="line">[root@CentOS7 ~]#l.</span><br><span class="line">.              .bash_logout   .cache   .dbus          .lesshst  .tcshrc</span><br><span class="line">..             .bash_profile  .config  .esd_auth      .local    .viminfo</span><br><span class="line">.bash_history  .bashrc        .cshrc   .ICEauthority  .ssh      .vimrc</span><br><span class="line">[root@CentOS7 ~]#</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Shell 脚本的 while 语句简单笔记</title>
    <url>/2020/02/14/Shell-while/</url>
    <content><![CDATA[<p><strong>while 循环语句的基本语法为：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while  &lt;手机话费是否充足&gt;        #&lt;&#x3D;&#x3D;当话费余额不足时，就不能发短信了，也就是不能进入循环了</span><br><span class="line">do</span><br><span class="line">       发短信                  #&lt;&#x3D;&#x3D;发短信后话费会减少</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p><strong>形象的说明while 循环语句：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while  &lt;手机话费是否充足&gt;        #&lt;&#x3D;&#x3D;当话费余额不足时，就不能发短信了，也就是不能进入循环了</span><br><span class="line">do</span><br><span class="line">       发短信                  #&lt;&#x3D;&#x3D;发短信后话费会减少</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>while 循环语句逻辑流程图：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6121564-8ac31765f2af2711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="while循环执行逻辑流程图"></p>
]]></content>
  </entry>
  <entry>
    <title>scp 命令用法</title>
    <url>/2020/02/14/scp/</url>
    <content><![CDATA[<p><strong>从远处复制文件到本地目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# scp  root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;nginx-0.5.38.tar.gz  &#x2F;opt&#x2F;soft&#x2F;</span><br><span class="line"></span><br><span class="line">#从10.10.10.10机器上的&#x2F;opt&#x2F;soft&#x2F;的目录中下载nginx-0.5.38.tar.gz 文件到本地&#x2F;opt&#x2F;soft&#x2F;目录中。</span><br></pre></td></tr></table></figure>

<p><strong>从远处复制到本地</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# scp  -r  root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;mongodb  &#x2F;opt&#x2F;soft&#x2F;</span><br><span class="line"></span><br><span class="line">#从10.10.10.10机器上的&#x2F;opt&#x2F;soft&#x2F;中下载mongodb目录到本地的&#x2F;opt&#x2F;soft&#x2F;目录来。</span><br></pre></td></tr></table></figure>

<p><strong>上传本地文件到远程机器指定目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# scp  &#x2F;opt&#x2F;soft&#x2F;nginx-0.5.38.tar.gz  root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;scptest</span><br><span class="line"></span><br><span class="line">#复制本地&#x2F;opt&#x2F;soft&#x2F;目录下的文件nginx-0.5.38.tar.gz到远程机器10.10.10.10的opt&#x2F;soft&#x2F;scptest目录。</span><br></pre></td></tr></table></figure>

<p><strong>上传本地目录到远程机器指定目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# scp -r &#x2F;opt&#x2F;soft&#x2F;mongodb root@10.10.10.10:&#x2F;opt&#x2F;soft&#x2F;scptest</span><br><span class="line"></span><br><span class="line">#上传本地目录&#x2F;opt&#x2F;soft&#x2F;mongodb到远程机器10.10.10.10上&#x2F;opt&#x2F;soft&#x2F;scptest的目录中去。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本文只是个人笔记，为了方便身边的朋友看到所以发布。内容摘自<a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a>网站，一个很好的网站！</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
